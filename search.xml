<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS基础整理</title>
    <url>/2020/08/10/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>本文主要是总结CSS的基础内容，方便日后查阅。</p>
<a id="more"></a>

<h2 id="导入CSS样式的方式"><a href="#导入CSS样式的方式" class="headerlink" title="导入CSS样式的方式"></a>导入CSS样式的方式</h2><ul>
<li><p><strong>行内样式：</strong>在标签元素中直接添加style属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"color: black;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>内部样式：</strong>在head标签内嵌入style样式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    p&#123;</span><br><span class="line">        color: black;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>外部样式：</strong>在head标签内声明外部引用，连接到外部.css文件，有两种引用方式分别为链接式和导入式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--链接式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/style.css"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入式，css2.1新增--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="keyword">@import</span> url(css/style.css);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--style.css文件--&gt;</span></span><br><span class="line">p&#123;</span><br><span class="line">    color: aqua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color="ff0000">元素样式加载优先级遵循覆盖原则：自上向下逐一执行，最后执行的样式即为最后展示的样式</font></p>
</li>
</ul>
<h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><h3 id="1-基本选择器"><a href="#1-基本选择器" class="headerlink" title="1.基本选择器"></a>1.基本选择器</h3><ul>
<li><p><strong>标签选择器：</strong></p>
<p>标签选择器会匹配当前页面所有该标签，并使得它们的样式均相同。</p>
</li>
<li><p><strong>类选择器：</strong></p>
<p> 通过指定标签内部class属性，使得每个标签都有一个自己的class类，然后直接在对应class类声明样式，格式：<strong>.class类名{}</strong>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.class1</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#0000ff</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.class2</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#adff2f</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"class1"</span>&gt;</span>paragon<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"class2"</span>&gt;</span>paragon<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>id选择器：</strong></p>
<p>通过指定标签内部id属性，然后直接在对应id声明样式，格式：<strong>#id名称{}</strong>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#id1</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#0000ff</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-id">#id2</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#adff2f</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"id1"</span>&gt;</span>paragon<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"id2"</span>&gt;</span>paragon<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>id选择器和class类选择器区别：</strong></p>
<p>id选择器只可使用一次，全局唯一；class类选择器可以跨标签复用。</p>
</li>
<li><p><strong>基本选择器优先级：</strong></p>
<p><font color="ff0000">id选择器 &gt; class类选择器 &gt; 标签选择器</font></p>
</li>
</ul>
<h3 id="2-层次选择器"><a href="#2-层次选择器" class="headerlink" title="2.层次选择器"></a>2.层次选择器</h3><ul>
<li><p><strong>后代选择器</strong></p>
<p>祖先节点的后继所有子节点均继承祖先样式，格式：<strong>父类标签名 父类后继标签名{}</strong>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*表示body以及其后继所有p标签均使用该样式*/</span></span><br><span class="line"><span class="selector-tag">body</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">  color = #adff2f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>子选择器</strong></p>
<p>父节点的直系子节点样式继承父节点样式，格式：<strong>父类标签名&gt;子标签名{}</strong>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*表示body的直系p标签使用该样式*/</span></span><br><span class="line"><span class="selector-tag">body</span>&gt;<span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>相邻兄弟选择器</strong></p>
<p>同级兄弟节点其直接下方节点的样式继承兄弟节点样式（兄弟节点样式不生效），格式：<strong>兄弟节点类属性+下方节点{}</strong>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.class+p&#123;</span><br><span class="line">		color: aquamarine;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">&lt;!--只有p3会显示颜色，p4,p2,p1不会显示颜色--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"class"</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>通用选择器</strong></p>
<p> 同级兄弟节点其<font color="ff0000">所有下方节点</font>的样式均继承兄弟节点样式（兄弟节点样式不生效），格式：<strong>兄弟节点类属性~下方节点{}</strong>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.class~p&#123;</span><br><span class="line">	color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">&lt;!--p3,p4均会显示颜色，p2,p1不会显示颜色--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"class"</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="3-结构伪类选择器"><a href="#3-结构伪类选择器" class="headerlink" title="3.结构伪类选择器"></a>3.结构伪类选择器</h3><p>结构伪类选择器详解: <a href="https://blog.csdn.net/ixygj197875/article/details/79038041" target="_blank" rel="noopener">https://blog.csdn.net/ixygj197875/article/details/79038041</a> </p>
<h3 id="4-属性选择器"><a href="#4-属性选择器" class="headerlink" title="4.属性选择器"></a>4.属性选择器</h3><p> 通过标签名下指定的属性名选择样式，格式：<strong>标签名[属性名=”属性值”]{}</strong>，其中：</p>
<ul>
<li>=表示严格匹配，严格匹配当前属性值对应的标签元素。</li>
<li>*=表示贪婪匹配，匹配当前所有含有该属性的所有标签元素。</li>
<li>^=表示起始匹配，匹配当前开头含有该属性的所有标签元素。</li>
<li>$=表示末尾匹配，匹配当前末尾含有该属性的所有标签元素。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="comment">/*p2会显示颜色，p1,p3不会显示颜色*/</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span><span class="selector-attr">[class=<span class="string">"class"</span>]</span>&#123;</span></span><br><span class="line">	color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="comment">/*p1,p2会显示颜色，p3不会显示颜色*/</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span><span class="selector-attr">[class*=<span class="string">"class"</span>]</span>&#123;</span></span><br><span class="line">	color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="comment">/*a1,a2会显示颜色，a3不会显示颜色*/</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">a</span><span class="selector-attr">[href^=<span class="string">"1d"</span>]</span>&#123;</span></span><br><span class="line">  color: greenyellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="comment">/*a2会显示颜色，a1,a3不会显示颜色*/</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">a</span><span class="selector-attr">[href$=<span class="string">"com"</span>]</span>&#123;</span></span><br><span class="line">  color: greenyellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"class"</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"class1"</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> &gt;</span>p3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"1d"</span>&gt;</span>a1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"1d.com"</span>&gt;</span>a2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"3d"</span>&gt;</span>a3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="美化网页元素"><a href="#美化网页元素" class="headerlink" title="美化网页元素"></a>美化网页元素</h2><h3 id="1-字体样式"><a href="#1-字体样式" class="headerlink" title="1.字体样式"></a>1.字体样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Kaiti SC"</span>;<span class="comment">/*字体*/</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;<span class="comment">/*字体大小*/</span></span><br><span class="line">    <span class="attribute">font-weight</span>: bold;<span class="comment">/*字体粗细*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*简化写法*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">font</span>: bold <span class="number">50px</span> <span class="string">"Kaiti SC"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-文本样式"><a href="#2-文本样式" class="headerlink" title="2.文本样式"></a>2.文本样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  	<span class="comment">/*color颜色表示方式*/</span></span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#0000ff</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">0</span>,<span class="number">255</span>,<span class="number">255</span>);</span><br><span class="line">  	<span class="comment">/*rgba代表在传统rgb上添加a,表示透明度*/</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0%</span>,<span class="number">100%</span>,<span class="number">100%</span>,<span class="number">0.3</span>);</span><br><span class="line">  	<span class="comment">/*text-align表示文本对齐方式*/</span></span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">  	<span class="comment">/*text-indent表示文本首行缩进字符*/</span></span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span><br><span class="line">  	<span class="comment">/*line-height表示行高，当line-height同当前块height同高度，则可以实现文本上下居中效果*/</span></span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  	<span class="comment">/*text-decoration表示文本装饰线*/</span></span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;<span class="comment">/*下滑线*/</span></span><br><span class="line">    <span class="attribute">text-decoration</span>: line-through;<span class="comment">/*中滑线*/</span></span><br><span class="line">    <span class="attribute">text-decoration</span>: overline;<span class="comment">/*上滑线*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-超链接样式"><a href="#3-超链接样式" class="headerlink" title="3.超链接样式"></a>3.超链接样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*点击超链接之后未离开的样式*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;&#125;</span><br><span class="line"><span class="comment">/*悬停在超链接上的样式*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;&#125;</span><br><span class="line"><span class="comment">/*未点击之前的链接样式*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;&#125;</span><br><span class="line"><span class="comment">/*已点击后的链接样式*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-列表样式"><a href="#4-列表样式" class="headerlink" title="4.列表样式"></a>4.列表样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">  <span class="comment">/*无序列表前序样式*/</span></span><br><span class="line">  <span class="attribute">list-style</span>: none;<span class="comment">/*去除无序列表黑点*/</span></span><br><span class="line">  <span class="attribute">list-style</span>: circle;<span class="comment">/*无序列表黑点变为空心圆点*/</span></span><br><span class="line">  <span class="attribute">list-style</span>: square;<span class="comment">/*无序列表黑点变为正方形块*/</span></span><br><span class="line">  <span class="attribute">list-style</span>: decimal;<span class="comment">/*无序列表黑点变为有序列表*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-背景样式"><a href="#5-背景样式" class="headerlink" title="5.背景样式"></a>5.背景样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  	<span class="comment">/*边框样式*/</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  	<span class="comment">/*背景图片*/</span></span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"path"</span>);</span><br><span class="line">  	<span class="comment">/*背景图片填充方式：no-repeat表示不填充,repeat-x表示按x轴填充*/</span></span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  	<span class="comment">/*背景图片填充之后图片定位，x轴右向为正，y轴下向为正*/</span></span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">100px</span> <span class="number">60px</span>;</span><br><span class="line">  	<span class="comment">/*上述缩写方式*/</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">"path"</span>) <span class="number">100px</span> <span class="number">60px</span> no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><h3 id="1-什么是盒子模型"><a href="#1-什么是盒子模型" class="headerlink" title="1.什么是盒子模型"></a>1.什么是盒子模型</h3><p>盒子模型包含三个要素，分别是：</p>
<ul>
<li>外边距<strong>margin</strong></li>
<li>边框<strong>border</strong></li>
<li>内边距<strong>padding</strong></li>
</ul>
<h3 id="2-初始化"><a href="#2-初始化" class="headerlink" title="2.初始化"></a>2.初始化</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">  <span class="comment">/*margin的初始化：</span></span><br><span class="line"><span class="comment">  	margin赋值顺序为上-右-下-左对称复制模式：</span></span><br><span class="line"><span class="comment">  	margin:0; 表示四个方向边距均为0</span></span><br><span class="line"><span class="comment">  	margin:0 1px; 表示上边距为0，右边距为1px，下边距为0，左边距为1px</span></span><br><span class="line"><span class="comment">  	margin:0 1px 2px; 表示上边距为0，右边距为1px，下边距为2px，左边距为1px</span></span><br><span class="line"><span class="comment">  	margin:0 1px 2px 3px; 表示上边距为0，右边距为1px，下边距为2px，左边距为3px</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CSS定位机制"><a href="#CSS定位机制" class="headerlink" title="CSS定位机制"></a>CSS定位机制</h2><h3 id="1-文档流定位"><a href="#1-文档流定位" class="headerlink" title="1.文档流定位"></a>1.文档流定位</h3><ul>
<li>元素分类：<ul>
<li><strong>block块级元素</strong>：独占一行，eg:h1～h6,div,p,ul…</li>
<li><strong>inline行内元素</strong>：不独占一行，eg:span,img,a,strong…</li>
<li><strong>inline-block行块级元素</strong>：不单独占用一行，但是可以设置height等block独有的属性。</li>
</ul>
</li>
<li>元素类型转换：<strong>display</strong>强制转换——<strong>用于导航栏设计</strong></li>
</ul>
<h3 id="2-浮动定位"><a href="#2-浮动定位" class="headerlink" title="2.浮动定位"></a>2.浮动定位</h3><ul>
<li><p><strong>float属性</strong>：left,right,none，使得块级元素向左/右/不浮动</p>
</li>
<li><p><strong>clear属性</strong>：left,right,none，清除块级元素向左/右/两边浮动属性</p>
<p>clear属性用于盒子模型排列不整齐时可以通过清除浮动特性获得更好的排列效果。</p>
</li>
<li><p><strong>父级边框塌缩问题：</strong></p>
<ol>
<li><p>增加父级元素高度</p>
</li>
<li><p>父级元素内底部增加div标签清除浮动：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;div id="father"&gt;</span><br><span class="line">	...</span><br><span class="line">	&lt;div class="div"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="selector-class">.div</span>&#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>overflow：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;div id="father"&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="selector-id">#father</span>&#123;</span><br><span class="line">  <span class="comment">/*overflow属性：当内容溢出盒子边框时调用*/</span></span><br><span class="line">  <span class="comment">/*hidden：隐藏溢出部分</span></span><br><span class="line"><span class="comment">  	scroll：显示滚动条</span></span><br><span class="line"><span class="comment">  	auto：如果有溢出部分显示滚动条</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">	<span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>在父级元素之后添加伪类after</strong>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#father</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*效果等同于方法2*/</span></span><br><span class="line"><span class="selector-id">#father</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-层定位"><a href="#3-层定位" class="headerlink" title="3.层定位"></a>3.层定位</h3></li>
</ol>
</li>
<li><p><strong>position属性：</strong></p>
<ul>
<li><strong>static：</strong>默认值，没有定位关系。</li>
<li><strong>fixed：</strong>固定定位，相对于浏览器窗口。</li>
<li><strong>relative：</strong>相对定位，相对于直接父元素，<font color="ff0000">relative脱离正常的文本流，但是其在文本流中的原始位置依然存在。</font></li>
<li><strong>absolute：</strong>绝对定位，相对于static以外的第一个父级元素，<font color="ff0000">absolute脱离文本流，而且正常流中的原位置不再存在。</font></li>
</ul>
</li>
<li><p><strong>位置属性：</strong>left,right,top,bottom：相对于左/右/上/下偏移距离（正值默认反向）</p>
</li>
<li><p><strong>z-index属性：</strong>图层属性，默认值0，值越大说明优先级越高。</p>
</li>
</ul>
<h2 id="CSS变换"><a href="#CSS变换" class="headerlink" title="CSS变换"></a>CSS变换</h2><h3 id="1-2D变换"><a href="#1-2D变换" class="headerlink" title="1.2D变换"></a>1.2D变换</h3><p><strong>transform属性：旋转，缩放，移动，拉伸</strong></p>
<ul>
<li><strong>rotate(deg):旋转</strong>，正值顺时针旋转，负值逆时针旋转。</li>
<li><strong>scale(x,y)：缩放</strong>，x表示水平方向缩放的倍数;y表示垂直方向缩放的倍数，范围0-1内表示缩小，&gt;1表示放大。</li>
</ul>
<h3 id="2-过渡与动画"><a href="#2-过渡与动画" class="headerlink" title="2.过渡与动画"></a>2.过渡与动画</h3><ul>
<li><p><strong>transition：</strong>过渡，指元素某个属性从一个值过渡到另一个值</p>
<ul>
<li>transition-property:属性名</li>
<li>transition-duration:持续时间</li>
<li>transition-timing-function:过渡方法：ease:慢;linear:匀速;ease-in-out:慢快慢</li>
<li>transition-delay:延迟时间</li>
</ul>
</li>
<li><p><strong>animation：</strong></p>
</li>
</ul>
<ol>
<li>定义动画：@keyframes规则</li>
<li>调用动画：animation属性：属性名-时间-方法</li>
</ol>
<h3 id="3-3D变换"><a href="#3-3D变换" class="headerlink" title="3.3D变换"></a>3.3D变换</h3><ol>
<li>设定3D变换：<font color="ff0000">transform-style:preserve-3d</font></li>
<li>设定transform变换属性：rotateX(deg)/rotateY(deg)/rotateZ(deg),旋转变换角度</li>
<li>设定perspective透视属性：近大远小，单位px</li>
</ol>
<p>其中1和2组成父容器，3组成舞台，即眼睛到舞台的距离，通过perspective实现3D效果。</p>
]]></content>
      <categories>
        <category>Web前端学习</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML基础整理</title>
    <url>/2020/08/06/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>本文主要是总结HTML的基础内容，方便日后查阅。</p>
<a id="more"></a>
<h2 id="Web概述"><a href="#Web概述" class="headerlink" title="Web概述"></a>Web概述</h2><h3 id="1-浏览器内核"><a href="#1-浏览器内核" class="headerlink" title="1 浏览器内核"></a>1 浏览器内核</h3><ul>
<li>JS引擎</li>
<li>渲染引擎<ul>
<li>Trident（IE内核）；EdgeHTML（Edge内核）</li>
<li>Gecko（Firefox内核）</li>
<li>webkit（Safari内核）</li>
<li>Blink（Chrome内核）</li>
</ul>
</li>
</ul>
<h3 id="2-Web标准"><a href="#2-Web标准" class="headerlink" title="2 Web标准"></a>2 Web标准</h3><ul>
<li>结构标准：用于对网页元素进行整理和分类，主要包括XML和XHTML两部分，即.html。</li>
<li>样式标准：用于设置网页元素的外观样式，主要指CSS，即.css。</li>
<li>行为标准：指网页模型的定义及交互的编写，主要包括DOM和ECMAScrpit两部分，即.js。</li>
</ul>
<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="1-HTML基本格式"><a href="#1-HTML基本格式" class="headerlink" title="1 HTML基本格式"></a>1 HTML基本格式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-WebStorm常用快捷键"><a href="#2-WebStorm常用快捷键" class="headerlink" title="2 WebStorm常用快捷键"></a>2 WebStorm常用快捷键</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&gt;：下一个子标签</span></span><br><span class="line"><span class="comment">*：多少个标签</span></span><br><span class="line"><span class="comment">$：标签的名称序号</span></span><br><span class="line"><span class="comment">&#123;&#125;:标签的内容</span></span><br><span class="line"><span class="comment">[]:标签的引用属性</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--输入：h1,按tab键--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!--输入：div#abc,按Tab键--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"abc"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!--输入：div.abc,按Tab键--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"abc"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--输入  ul&gt;li*5&gt;a[href=#]&#123;我是第$个&#125; 再按tab键--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>我是第1个<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>我是第2个<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>我是第3个<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>我是第4个<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>我是第5个<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!--输入 li*3&gt;div.img&gt;img[src='images/$.jpg'] 再按tab键--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--快速生成for循环--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">/* for循环：输入itar,再点击tab键*/</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> obj = array[i]; </span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--div#tab1+div#tab2--&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"tab1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"tab2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入  link   加tab键--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!--引入css   link:css   加tab键 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/mycss.css"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!--引入js    script:src  加tab键--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!--html中插入js   script  加tab键--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--input:button 加tab键--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--form:get--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--form:post--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-HTML常用标签"><a href="#3-HTML常用标签" class="headerlink" title="3 HTML常用标签"></a>3 HTML常用标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span>水平分割线标签</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span>换行标签，只显示一行</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>段落标签</span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span>加粗标签</span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span>斜体标签</span><br><span class="line"><span class="symbol">&amp;nbsp;</span>特殊符号标签</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"path"</span> <span class="attr">alt</span>=<span class="string">"text"</span> <span class="attr">title</span>=<span class="string">"text"</span> <span class="attr">width</span>=<span class="string">"x"</span> <span class="attr">height</span>=<span class="string">"y"</span>&gt;</span></span><br><span class="line">图片路径 图片丢失提醒信息 鼠标悬停显示信息 宽度 高度</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"path"</span> <span class="attr">target</span>=<span class="string">"目标窗口位置"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">target常用属性：_blank:在新标签中打开 _self:在当前页面打开</span><br><span class="line"><span class="comment">&lt;!--锚链接--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">"top"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#TOP"</span>&gt;</span>BACK TO TOP<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">设置a标签name属性，通过href指定跳转</span><br><span class="line"><span class="comment">&lt;!--列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>无序列表</span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ol</span>&gt;</span>有序列表</span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span>自定义列表</span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span>列表名称</span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span>列表内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表格--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1px"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="comment">&lt;!--行--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"4"</span>&gt;</span>1-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="comment">&lt;!--列 colspan跨列--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>2-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="comment">&lt;!--列 rowspan跨行--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--音视频 controls：加载控件显示视频 autoplay：自动播放 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"path"</span> <span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--iframe内联框架--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"flag"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">引用页面地址 框架标志名 边界属性</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"path"</span> <span class="attr">target</span>=<span class="string">"flag"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表单</span></span><br><span class="line"><span class="comment">action:表单提交的位置，可以是网站，也可以是一个请求处理地址</span></span><br><span class="line"><span class="comment">method:包含get和post两种方式，前者高效但不安全，后者使用场景更多</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"path"</span> <span class="attr">method</span>=<span class="string">"get/post"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--文本输入框 input</span></span><br><span class="line"><span class="comment">		type:通过type属性自动适应方式，可取text表示文本输入，password表示密码输入，submit表示提交，reset表示重置</span></span><br><span class="line"><span class="comment">		value:表示元素默认显示的初始值，type为选择框时(radio/checkbox)必须为其指定初始值</span></span><br><span class="line"><span class="comment">		checked:当type为radio或checkbox时，表示是否默认选中</span></span><br><span class="line"><span class="comment">		name:表示组，也表示该标签的属性，在选择框时需要将name属性值置为相同</span></span><br><span class="line"><span class="comment">		初级验证:placeholder-默认填充信息;required-非空判断;pattern-正则表达式</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"values"</span> <span class="attr">checked</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">tpye</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"male"</span> <span class="attr">name</span>=<span class="string">"gender"</span>/&gt;</span>男</span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">tpye</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"female"</span> <span class="attr">name</span>=<span class="string">"gender"</span>/&gt;</span>女</span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span>  <span class="attr">name</span>=<span class="string">"files"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"上传文件"</span> <span class="attr">name</span>=<span class="string">"upload"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--下拉列表框--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--文本域--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-网页基本页面结构分析"><a href="#4-网页基本页面结构分析" class="headerlink" title="4 网页基本页面结构分析"></a>4 网页基本页面结构分析</h3><table>
<thead>
<tr>
<th>元素名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>header</td>
<td>标记头部区域的内容</td>
</tr>
<tr>
<td>footer</td>
<td>标记脚步区域的内容</td>
</tr>
<tr>
<td>section</td>
<td>Web页面中的一块独立区域</td>
</tr>
<tr>
<td>artical</td>
<td>独立的文章内容</td>
</tr>
<tr>
<td>aside</td>
<td>相关内容或应用（常用于侧边栏）</td>
</tr>
<tr>
<td>nav</td>
<td>导航类辅助内容</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Web前端学习</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Java注解与反射</title>
    <url>/2020/07/30/Java%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>本文主要是总结Java注解与反射的相关知识，加深自己对Java类动态语言的理解，同时为日后学习Spring打下基础。</p>
<a id="more"></a>

<h2 id="注解："><a href="#注解：" class="headerlink" title="注解："></a>注解：</h2><h3 id="什么是注解"><a href="#什么是注解" class="headerlink" title="什么是注解"></a>什么是注解</h3><ul>
<li><strong>Annotation的作用</strong><ul>
<li>不是程序本身，但是可以对程序作出解释。</li>
<li>可以被其他程序（比如：编译器等）读取。</li>
</ul>
</li>
<li><strong>Annotation的格式：</strong><ul>
<li>注解是以“@注释名”在代码中存在的，还可以添加一些参数值，例如：@SuppressWarnings(value=”unchecked”)。</li>
</ul>
</li>
<li><strong>Annotation使用范围：</strong><ul>
<li>附加在package、class、method、field等上面，相当于给他们添加了额外的辅助信息，然后通过反射机制编程实现对这些元数据的访问。</li>
</ul>
</li>
</ul>
<h3 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h3><ul>
<li><p><strong>Override：</strong></p>
<p>定义在java.lang.Override中，此注释只适用于修辞方法，表示一个方法声明打算重写超类中的另一个方法声明。</p>
</li>
<li><p><strong>Deprecated：</strong></p>
<p>定义在java.lang.Deprecated中，此注释可以用于修辞方法、属性、类，表示不鼓励程序员使用这样的元素，通常是因为它很危险或者有更好的选择。</p>
</li>
<li><p><strong>SuppressWarnings：</strong></p>
<p>定义在java.lang.SuppressWarnings中，用来抑制编译时警告信息，与前两个注释不同，此注解需要添加一个参数才可正常使用：</p>
<p>➢SuppressWarnings(“all”)</p>
<p>➢SuppressWarnings(“unchecked”)</p>
<p>➢SuppressWarnings(value={“deprecation”,”unchecked”})</p>
<p>➢……</p>
</li>
</ul>
<h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><ul>
<li><p>元注解的作用就是负责注解其他注解，Java定义了4个标准的meta-annotation类型，他们被用来提供对其他annotaion类型作说明。</p>
</li>
<li><p>这些类型和他们所支持的类在java.lang.annotation包可以找到:</p>
<p>➢<strong>@Target</strong>：用于描述注解的使用范围（即被描述的注解可以用在什么地方）</p>
<p>➢<strong>@Retention</strong>:表示需要在什么级别保存该注释信息，用于描述注解的生命周期（SOURCE&lt;CLASS&lt;RUNTIME）。</p>
<p>➢<strong>@Document</strong>:说明该注解将被包含在javadoc中。</p>
<p>➢<strong>@Inherited</strong>:说明子类可以继承父类中的该注解。</p>
</li>
</ul>
<h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><ul>
<li><p>使用<strong>@interface</strong>自定义注解，格式：<strong>public @interface 注解名{定义内容}</strong>。</p>
</li>
<li><p>自定义注解内部的参数格式：<strong><font color ="ff0000">参数类型+参数名()</font></strong>；若只有一个参数成员，参数名默认为<strong>value</strong>。</p>
</li>
<li><p>注解的元素必须要有值，我们定义注解元素时，一般默认使用空字符串，0作为默认值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注解可以显式赋值，如果没有默认值，则必须赋值</span></span><br><span class="line"><span class="meta">@myAnnotation</span>(id = <span class="number">3</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testAnnotation</span> </span>&#123;</span><br><span class="line">    <span class="meta">@myAnnotation</span>(id = <span class="number">5</span>,school = &#123;<span class="string">"THU"</span>,<span class="string">"CMU"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Target</span>(value = &#123;ElementType.METHOD,ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@interface</span> myAnnotation&#123;</span><br><span class="line">    <span class="comment">//注解的参数：参数类型+参数名()</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">    String[] school() <span class="keyword">default</span> &#123;<span class="string">"HDU"</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="反射："><a href="#反射：" class="headerlink" title="反射："></a>反射：</h2><h3 id="什么是反射"><a href="#什么是反射" class="headerlink" title="什么是反射"></a>什么是反射</h3><ul>
<li><p><strong>Reflection</strong>是Java被视为动态语言的关键，反射机制允许程序在执行期间借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</p>
</li>
<li><p>Java在加载完类之后，在堆内存的方法区中就产生了一个<strong><font color ="ff0000">Class类型</font></strong>的对象（<strong><font color ="ff0000">一个类只有一个Class对象</font></strong>），这个对象就包含了完整的类的结构信息。我们通过这个对象可以看到类的结构，这种过程称为反射。</p>
<ul>
<li>正常方式：引入需要的“包类”名称➜通过new实例化➜取得实例化对象</li>
<li>反射方式：实例化对象➜<strong>getClass()方法</strong>➜取得完整的“包类”名称</li>
</ul>
</li>
<li><p>反射相关的API</p>
<ul>
<li><p>java.lang.Class：代表一个类</p>
</li>
<li><p>java.lang.reflect.Method：代表类的方法</p>
</li>
<li><p>java.lang.reflect.Field：代表类的成员变量</p>
</li>
<li><p>java.lang.reflect.Constructor：代表类的构造器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//通过反射获得类的Class对象</span></span><br><span class="line">        Class&lt;?&gt; c1 = Class.forName(<span class="string">"JavaDoc.User"</span>);</span><br><span class="line">        Class&lt;?&gt; c2 = Class.forName(<span class="string">"JavaDoc.User"</span>);</span><br><span class="line">        Class&lt;?&gt; c3 = Class.forName(<span class="string">"JavaDoc.User"</span>);</span><br><span class="line">        <span class="comment">//一个类在内存中只有一个Class对象</span></span><br><span class="line">        <span class="comment">//一个类被加载后，类的整个结构都会被封装在Class对象中</span></span><br><span class="line">        System.out.println(c1.hashCode());</span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line">        System.out.println(c3.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实体类 pojo ,Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;...&#125;</span><br><span class="line"><span class="comment">//输出结果：hashCode相同</span></span><br><span class="line"><span class="number">1846274136</span></span><br><span class="line"><span class="number">1846274136</span></span><br><span class="line"><span class="number">1846274136</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="获得Class类的方式"><a href="#获得Class类的方式" class="headerlink" title="获得Class类的方式"></a>获得Class类的方式</h3><ul>
<li><p>若已知具体的类，通过类的<strong>class属性</strong>获取。</p>
</li>
<li><p>若已知某个类的实例化对象，调用该实例的<strong>getClass()方法</strong>获取Class对象。</p>
</li>
<li><p>若已知一个类的全类名，且该类在类路径下，可以通过Class类的<strong>静态方法forName()</strong>方法获取。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test02</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//通过forName获得</span></span><br><span class="line">        Class c1 = Class.forName(<span class="string">"JavaDoc.Student"</span>);</span><br><span class="line">        <span class="comment">//通过对象获得</span></span><br><span class="line">        Class c2 = student.getClass();</span><br><span class="line">        <span class="comment">//通过类名.class获得</span></span><br><span class="line">        Class c3 = Student<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">      </span><br><span class="line">        System.out.println(c1.hashCode());</span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line">        System.out.println(c3.hashCode());</span><br><span class="line">        <span class="comment">//获得父类类型</span></span><br><span class="line">        System.out.println(c1.getSuperclass().hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实体类 pojo ,Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;...&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Java内存分析"><a href="#Java内存分析" class="headerlink" title="Java内存分析"></a>Java内存分析</h3><table>
<thead>
<tr>
<th>Java内存区域</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>堆</td>
<td>存放new的对象和数组，可以被所有的线程共享，不会存放别的对象引用</td>
</tr>
<tr>
<td>栈</td>
<td>存放基本类型变量（包含具体数值）和引用对象的变量（包含具体地址）</td>
</tr>
<tr>
<td>方法区</td>
<td>可以被所有线程共享，包含了所有class和static变量</td>
</tr>
</tbody></table>
<p>这里只是浅显列出，详细分析需要参考Java的JVM。</p>
<h3 id="Class类初始化"><a href="#Class类初始化" class="headerlink" title="Class类初始化"></a>Class类初始化</h3><ul>
<li><p><strong>类的主动引用一定会发生类的初始化</strong></p>
<ul>
<li>当虚拟机启动时，先初始化main方法所在的类。</li>
<li>调用类的静态成员（除了final常量）和静态方法会发生初始化。</li>
<li>使用java.lang.reflect包反射调用会发生初始化。</li>
</ul>
</li>
<li><p><strong>类的被动引用不会发生类的初始化</strong></p>
<ul>
<li>当访问一个静态域时，只有真正声明这个域的类才会被初始化。如当通过子类引用父类的静态变量，不会导致子类初始化。</li>
<li>通过数组定义类的引用，不会触发此类的初始化。</li>
<li>引用常量不会触发此类的初始化。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test03</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Main类被加载"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//主动引用</span></span><br><span class="line">        Son son = <span class="keyword">new</span> Son();</span><br><span class="line">      	<span class="comment">//final不会初始化父类和子类</span></span><br><span class="line">        System.out.println(Son.M);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"父类被加载"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"子类被加载"</span>);</span><br><span class="line">        m = <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> M = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">Main类被加载</span><br><span class="line">父类被加载</span><br><span class="line">子类被加载</span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><p>类加载器作用是用来把类装载进内存，JVM规范定义了如下类型的类加载器：</p>
<ul>
<li><p><strong>系统类加载器：</strong></p>
<p>负责java -classpath或- D，导入java.class.path所指定的目录下的类与jar包装入工作，是最常用的加载器。</p>
</li>
<li><p><strong>扩展类加载器：</strong></p>
<p>负责jre/lib/ext目录下的jar包装入工作库。</p>
</li>
<li><p><strong>引导类加载器：</strong></p>
<p>采取C++编写，是JVM自带的类加载器，负责Java平台的核心库，用来装载核心类库，无法直接获取。</p>
</li>
<li><p><strong>类加载器采取双亲委派机制，自底向上检查类是否已经装载，自顶向下尝试加载类。</strong></p>
<p>自定义类加载器⇨System Classloader⇨Extension Classloader⇨Bootstrap Classloader</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test04</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取系统类加载器</span></span><br><span class="line">        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(systemClassLoader);</span><br><span class="line">        <span class="comment">//获取系统类加载器的父类加载器 --&gt; 扩展类加载器</span></span><br><span class="line">        ClassLoader parent = systemClassLoader.getParent();</span><br><span class="line">        System.out.println(parent);</span><br><span class="line">        <span class="comment">//获取扩展类加载器的父类加载器 --&gt; 根加载器（c/c++）</span></span><br><span class="line">        ClassLoader parent1 = parent.getParent();</span><br><span class="line">        System.out.println(parent1);</span><br><span class="line">        <span class="comment">//获取可加载的系统类加载器</span></span><br><span class="line">        System.out.println(System.getProperty(<span class="string">"java.class.path"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="类的运行时结构"><a href="#类的运行时结构" class="headerlink" title="类的运行时结构"></a>类的运行时结构</h3><ul>
<li><strong>getName()</strong></li>
<li><strong>getFields()</strong></li>
<li><strong>getMethods()</strong></li>
<li><strong>getConstructors()</strong></li>
<li><strong>……</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test05</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; c1 = Class.forName(<span class="string">"JavaDoc.User"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//getFields只能获取public类型信息</span></span><br><span class="line">        System.out.println(<span class="string">"===getFields===="</span>);</span><br><span class="line">        Field[] field = c1.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field1 : field) &#123;</span><br><span class="line">            System.out.println(field1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getDeclaredFields可获取所有信息</span></span><br><span class="line">        System.out.println(<span class="string">"===getDeclaredFields===="</span>);</span><br><span class="line">        field = c1.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field1 : field) &#123;</span><br><span class="line">            System.out.println(field1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> score;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">===getFields====</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">double</span> JavaDoc.User.score</span><br><span class="line">===getDeclaredFields====</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">double</span> JavaDoc.User.score</span><br><span class="line"><span class="keyword">private</span> java.lang.String JavaDoc.User.name</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> JavaDoc.User.id</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> JavaDoc.User.age</span><br></pre></td></tr></table></figure>

<h3 id="动态创建对象执行方法"><a href="#动态创建对象执行方法" class="headerlink" title="动态创建对象执行方法"></a>动态创建对象执行方法</h3><h4 id="创建类的对象："><a href="#创建类的对象：" class="headerlink" title="创建类的对象："></a>创建类的对象：</h4><p>调用Class对象的<strong>newInstance()</strong>方法</p>
<ul>
<li>类必须有一个无参构造器。</li>
<li>类的构造器访问权限需要足够。</li>
</ul>
<h4 id="创建步骤："><a href="#创建步骤：" class="headerlink" title="创建步骤："></a>创建步骤：</h4><ul>
<li>通过<strong>Class</strong>类中的<strong>getDeclaredConstructor()</strong>取得本类的指定形参类型的构造器。</li>
<li>向构造器的形参中传递一个<strong>对象数组</strong>进去，里面包含了构造器中所需的各个参数。</li>
<li>通过<strong>Constructor</strong>实例化对象。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test06</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; c1 = Class.forName(<span class="string">"JavaDoc.User"</span>);</span><br><span class="line">        <span class="comment">//newInstance默认调用无参构造</span></span><br><span class="line">        User user = (User) c1.newInstance();</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过构造器声明含参构造重新调用newInstance</span></span><br><span class="line">        Constructor&lt;?&gt; constructor = c1.getDeclaredConstructor(String<span class="class">.<span class="keyword">class</span>, <span class="title">int</span>.<span class="title">class</span>, <span class="title">int</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        User user2 = (User) constructor.newInstance(<span class="string">"zhangsan"</span>, <span class="number">001</span>, <span class="number">20</span>);</span><br><span class="line">        System.out.println(user2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射机制调用User类中的方法</span></span><br><span class="line">        Method setName = c1.getDeclaredMethod(<span class="string">"setId"</span>, <span class="keyword">int</span><span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        setName.invoke(user,<span class="number">001</span>);</span><br><span class="line">        System.out.println(user.getId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过关闭程序权限检测，操作程序的私有属性</span></span><br><span class="line">        User user4 = (User) c1.newInstance();</span><br><span class="line">        Field name = c1.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">        name.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        name.set(user4,<span class="string">"zhangsan2"</span>);</span><br><span class="line">        System.out.println(user4.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> id, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">		...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="反射操作注解"><a href="#反射操作注解" class="headerlink" title="反射操作注解"></a>反射操作注解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test07</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; c1 = Class.forName(<span class="string">"JavaDoc.User"</span>);</span><br><span class="line">        <span class="comment">//通过反射获得注解</span></span><br><span class="line">        Annotation[] annotations = c1.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">            System.out.println(annotation);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得注解内部value值</span></span><br><span class="line">        Table table = c1.getAnnotation(Table<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(table.value());</span><br><span class="line">        <span class="comment">//获取内部指定字段的注解信息</span></span><br><span class="line">        Field f1 = c1.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">        fieldStudent field = f1.getAnnotation(fieldStudent<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(field.columnName());</span><br><span class="line">        System.out.println(field.type());</span><br><span class="line">        System.out.println(field.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Table</span>(value = <span class="string">"db_User"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="meta">@fieldStudent</span>(columnName = <span class="string">"db_name"</span>,type = <span class="string">"varchar"</span>,length = <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@fieldStudent</span>(columnName = <span class="string">"db_id"</span>,type = <span class="string">"int"</span>,length = <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="meta">@fieldStudent</span>(columnName = <span class="string">"db_age"</span>,type = <span class="string">"int"</span>,length = <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类名的注解</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@interface</span> Table&#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//属性的注解</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@interface</span> fieldStudent&#123;</span><br><span class="line">    <span class="function">String <span class="title">columnName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">type</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//程序输出</span></span><br><span class="line"><span class="meta">@JavaDoc</span>.Table(value=db_User)</span><br><span class="line">db_User</span><br><span class="line">db_name</span><br><span class="line">varchar</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java基础学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java源码阅读</title>
    <url>/2020/07/18/Java%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</url>
    <content><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>本文主要是总结如何配置Java源码的阅读环境，可以方便我们更深入的了解Java JDK的相关底层实现逻辑，许多诸如HashMap实现逻辑均可通过本方法调试查阅底层交互。</p>
<a id="more"></a>
<p>看完本篇可以收获：</p>
<ul>
<li>Java源码阅读技巧</li>
<li>HashMap基本逻辑</li>
<li>IDEA调试技巧</li>
</ul>
<h2 id="Java源码环境搭建"><a href="#Java源码环境搭建" class="headerlink" title="Java源码环境搭建"></a>Java源码环境搭建</h2><h3 id="1-获取Java源码"><a href="#1-获取Java源码" class="headerlink" title="1.获取Java源码"></a>1.获取Java源码</h3><p>由于新版Java14的源码不好直接获取，我们就选择最常用的Java1.8的源码，通过官网下载Java1.8即可获得对应相关资源，具体实现步骤如下：</p>
<ol>
<li><p>通过Java 1.8构建新的Java项目</p>
<p><img src="https://s1.ax1x.com/2020/07/18/U29utS.png" alt="U29utS.png"></p>
<p>在新建项目中创建两个项目文件夹source和test，其中source用来存放Java的源码，test用来存放需要阅读的源码，笔者这里选择hashmap作为演示。</p>
</li>
<li><p>配置source环境</p>
<p>在source文件中添加我们下载好的Java 1.8的源码，首先选择IDEA左上角Project Structure(Mac英文状态下快捷键⌘;)，然后选择SDKs便可获取到对应的源码路径。</p>
<p><img src="https://s1.ax1x.com/2020/07/18/U2916s.png" alt="U2916s.png"><br>打开对应路径文件找到src.zip文件解压便可得Java 1.8对应的源码，之后将解压后的文件复制粘贴至我们的项目source路径下：(source源码对应文件下的资源可能略有不同，视个人的JDK版本)</p>
<p><img src="https://s1.ax1x.com/2020/07/18/U29Kfg.png" alt="U29Kfg.png"></p>
</li>
<li><p>创建测试代码</p>
<p><img src="https://s1.ax1x.com/2020/07/18/U29QpQ.png" alt="U29QpQ.png"></p>
<p>在test.hashmap中创建Test类，然后键入如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaDoc.test.hashmap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Double&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        hashMap.put(<span class="string">"k1"</span>,<span class="number">0.1</span>);</span><br><span class="line">        hashMap.put(<span class="string">"k2"</span>,<span class="number">0.2</span>);</span><br><span class="line">        hashMap.put(<span class="string">"k3"</span>,<span class="number">0.3</span>);</span><br><span class="line">        hashMap.put(<span class="string">"k4"</span>,<span class="number">0.4</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在Map所在行处添加断点调试，这样我们基本的HashMap的源码阅读环境就搭建完成了。</p>
</li>
</ol>
<h3 id="2-IDEA环境配置调整"><a href="#2-IDEA环境配置调整" class="headerlink" title="2.IDEA环境配置调整"></a>2.IDEA环境配置调整</h3><ol>
<li><p>修改heap size</p>
<p>为了保证hashmap基本运行稳定，我们先调整一下heap size，打开Preference——Build,Execution——Compiler，找到Build process heap size选项，调整大小：</p>
<p><img src="https://s1.ax1x.com/2020/07/18/U29nk8.png" alt="U29nk8.png"></p>
</li>
<li><p>解除源码查阅编辑限制</p>
<p>由于Java JDK的源码是受保护的，我们进行调试后无法直接进入源码内部去查看实现逻辑，这时候我们就需要更改Preference——Build,Execution——Stepping，找到Do not step into the classes  选项，去除前面的勾选，这时候我们便可以调试进入源码内部了：</p>
<p><img src="https://s1.ax1x.com/2020/07/18/U293Xn.png" alt="U293Xn.png"></p>
<p>接下来我们需要解除源码的编辑限制，这样我们在调试查看源码的过程中就可以添加一部分自己的注释了，首先打开IDEA左上角Project Structure选择SDKs——Sourcepath,选中下图所示文件后，<br>选择最下角➖符号移除，然后添加我们自己目录JavaDoc/src/JavaDoc/source（路径即为自己所对应项目下的source文件）</p>
<p><img src="https://s1.ax1x.com/2020/07/18/U29Gmq.png" alt="U29Gmq.png"></p>
<p><img src="https://s1.ax1x.com/2020/07/18/U29Y7V.png" alt="U29Y7V.png"></p>
<p>这样我们整体的Java源码的阅读环境就搭建起来了，不仅可以查看JDK源码，甚至可以在源码部分添加自己的理解。</p>
</li>
</ol>
<h2 id="HashMap基本调试"><a href="#HashMap基本调试" class="headerlink" title="HashMap基本调试"></a>HashMap基本调试</h2><h3 id="1-启动断点调试"><a href="#1-启动断点调试" class="headerlink" title="1.启动断点调试"></a>1.启动断点调试</h3><p>选择IDEA右上角对应的debug，静等程序debug完成。</p>
<h3 id="2-观察调试过程"><a href="#2-观察调试过程" class="headerlink" title="2.观察调试过程"></a>2.观察调试过程</h3><p>   <img src="https://s1.ax1x.com/2020/07/18/U29J00.png" alt="U29J00.png"></p>
<p>   <img src="https://s1.ax1x.com/2020/07/18/U29NkT.png" alt="U29NkT.png"><br>调试过程只是简单的HashMap的流程记录，原理部分参看网上诸多关于HashMap的讲解。</p>
<h3 id="3-常用的Java源码学习"><a href="#3-常用的Java源码学习" class="headerlink" title="3.常用的Java源码学习"></a>3.常用的Java源码学习</h3><p>在source中包含了所有的Java  JDK1.8的源码，其中主要实现集中于source——Java下：</p>
<p>   <img src="https://s1.ax1x.com/2020/07/18/U29UtU.png" alt="U29UtU.png"></p>
<p>其中各个组件的大致功能如下：</p>
<table>
<thead>
<tr>
<th>常用组件</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Java.io</td>
<td>基本阻塞式io控制模型，eg:File,Console…</td>
</tr>
<tr>
<td>Java.lang</td>
<td>基础数据包装类型，eg:annotation,reflect…</td>
</tr>
<tr>
<td>Java.math</td>
<td>特殊数据处理类型，eg:BigInteger…</td>
</tr>
<tr>
<td>Java.net</td>
<td>网络通信模型，eg:Socket…</td>
</tr>
<tr>
<td>Java.nio</td>
<td>非阻塞式io控制模型，eg:Buffer…</td>
</tr>
<tr>
<td>Java.time</td>
<td>JDK1.8新增，时间模型</td>
</tr>
<tr>
<td>Java.util</td>
<td>基本工具，eg:J.U.C(concurrent),hashmap…</td>
</tr>
</tbody></table>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文主要是对Java源码部分通过IDEA进行调试分析，在调试过程中可以记录JDK底层源码的实现逻辑，加深自己对JDK源码的理解。</p>
<p>可能遇到的问题：</p>
<ul>
<li><p>程序调试窗口无法正常调试：</p>
<p>看看是不是IDEA右上角Edit Configurations选错成main class，需要更改成Test所在类。</p>
</li>
<li><p>Test中HashMap调试一直卡在writing classes：</p>
<p>打开设置File——Preference(Windows下对应Settings)——Build,Execution——Compiler：调整heap size大小至合适范围，一般1800Mbytes足矣。</p>
</li>
<li><p>上述bug均未出现，但仍然无法调试阅读源码：</p>
<p>可能是项目下source对应的文件不规范，建议从官网上下载对应的Java JDk，然后在安装目录中找到src.zip文件解压后将其重新导入到source目录下。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java源码学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础语法学习笔记</title>
    <url>/2020/07/28/Java%E5%9F%BA%E7%A1%80%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>本文主要是总结一些Java的基础知识，主要是用来记录自己的学习过程与学习心得。</p>
<a id="more"></a>

<h2 id="第一章：基础语法整理"><a href="#第一章：基础语法整理" class="headerlink" title="第一章：基础语法整理"></a>第一章：基础语法整理</h2><h3 id="String拼接"><a href="#String拼接" class="headerlink" title="String拼接"></a>String拼接</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> ... </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>,b=<span class="number">20</span>;</span><br><span class="line"><span class="comment">//以下两条代码输出结果均为String类型</span></span><br><span class="line">System.out.println(<span class="string">""</span>+a+b);</span><br><span class="line"><span class="comment">//输出1020</span></span><br><span class="line">System.out.println(a+b+<span class="string">""</span>);</span><br><span class="line"><span class="comment">//输出30</span></span><br></pre></td></tr></table></figure>

<h3 id="Scanner用法"><a href="#Scanner用法" class="headerlink" title="Scanner用法"></a>Scanner用法</h3><ol>
<li><p>获取系统输入流：new scanner(System.in)</p>
</li>
<li><p>判断输入截止：hasNext()/hasNextLine</p>
</li>
<li><p>获取用户输入信息：scanner.next()/scanner.nextLine()</p>
</li>
<li><p>关闭scanner方法：scanner.close()</p>
<p>完整代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputScnner</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"please input a string:"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Java-Scnner输入流</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">				<span class="comment">/*</span></span><br><span class="line"><span class="comment">				next方法：</span></span><br><span class="line"><span class="comment">				1.只有在遇到有效字符才正式生效，即开始输入的若干空格字符不被正常识别记录</span></span><br><span class="line"><span class="comment">				2.有效字符之后遇到空格的元素被剔除</span></span><br><span class="line"><span class="comment">				3.以Enter作为截止输入符</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//next() </span></span><br><span class="line">        <span class="keyword">if</span>(scanner.hasNext())&#123;</span><br><span class="line">            String str = scanner.next();</span><br><span class="line">            System.out.println(<span class="string">"output is "</span>+str);</span><br><span class="line">        &#125;</span><br><span class="line">				<span class="comment">/*</span></span><br><span class="line"><span class="comment">				nextLine方法：</span></span><br><span class="line"><span class="comment">				1.以Enter作为截止输入符</span></span><br><span class="line"><span class="comment">				2.即Enter之前的所有的符号均可被正常识别记录</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//nextLine() </span></span><br><span class="line">        <span class="keyword">if</span>(scanner.hasNextLine())&#123;</span><br><span class="line">            String str = scanner.nextLine();</span><br><span class="line">            System.out.println(<span class="string">"output is "</span>+str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//close scnner</span></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="switch-case穿透"><a href="#switch-case穿透" class="headerlink" title="switch case穿透"></a>switch case穿透</h3><p>switch-case匹配结构中，若case分支不存在break语句且当前条件匹配该case，则直接执行此case及之后所有case分支语句，直到遇到下一个break停止执行,代码示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 如果当前I1值为B，则匹配第二个case语句，程序整体输出B所在case语句之后所有sout语句，</span></span><br><span class="line"><span class="comment"> 直至遇到break为止，若D所在case语句也不存在break，则default语句依旧被输出。</span></span><br><span class="line"><span class="comment"> 输出结果为：</span></span><br><span class="line"><span class="comment"> Nice!</span></span><br><span class="line"><span class="comment"> ohyeah!</span></span><br><span class="line"><span class="comment"> shit!</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">switch</span> (I1)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"A"</span>:</span><br><span class="line">                System.out.println(<span class="string">"Good!"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"B"</span>:</span><br><span class="line">                System.out.println(<span class="string">"Nice!"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"C"</span>:</span><br><span class="line">                System.out.println(<span class="string">"ohyeah!"</span>);</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">case</span> <span class="string">"D"</span>:</span><br><span class="line">                System.out.println(<span class="string">"shit!"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">"Wrong!"</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h3 id="值传递和引用传递"><a href="#值传递和引用传递" class="headerlink" title="值传递和引用传递"></a>值传递和引用传递</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        System.out.println(a);<span class="comment">//输出 a = 1</span></span><br><span class="line">        Test.change(a);</span><br><span class="line">        System.out.println(a);<span class="comment">//输出 a = 1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        a = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//引用传递</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.name = <span class="string">"lisi"</span>;</span><br><span class="line">        System.out.println(person.name);<span class="comment">//输出 lisi</span></span><br><span class="line">        Test.change(person);</span><br><span class="line">        System.out.println(person.name);<span class="comment">//输出 zhangsan</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">        person.name = <span class="string">"zhangsan"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><ol>
<li>JDK 1.5新增功能</li>
<li>在方法声明中，在指定参数类型后添加省略号(…)</li>
<li>一个方法中只能声明一个可变参数，<font color ="ff0000">它必须是方法的最后一个参数</font>，任何其他普通参数均需在其之前声明。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exchange</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        printMaxmum(<span class="number">1.2</span>,<span class="number">323</span>,<span class="number">12</span>,<span class="number">44</span>,<span class="number">4.5</span>);</span><br><span class="line">        printMaxmum(<span class="keyword">new</span> <span class="keyword">double</span>[]&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">7.7</span>,<span class="number">6</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  	<span class="comment">//可变参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMaxmum</span><span class="params">(<span class="keyword">double</span>... number)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(number.length==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"no number"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> max = number[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; number.length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (number[i]&gt;max)</span><br><span class="line">                max=number[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"the max value is :"</span>+max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arrays_one = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[][] arrays_two = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//JDK1.5新增功能</span></span><br><span class="line"><span class="comment">//一维数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> array:arrays_one)</span><br><span class="line">&#123;</span><br><span class="line">  System.out.println(array);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//二维数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span>[] ints:arrays_two)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> anInt:ints)</span><br><span class="line">    System.out.println(anInt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//二维数组创建</span></span><br><span class="line">        System.out.println(<span class="string">"please input matrix's nums,lins and cows:"</span>);</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> sum = scanner.nextInt();<span class="comment">//有效值总数</span></span><br><span class="line">        <span class="keyword">int</span> lin = scanner.nextInt();<span class="comment">//行数</span></span><br><span class="line">        <span class="keyword">int</span> cow = scanner.nextInt();<span class="comment">//列数</span></span><br><span class="line">				<span class="comment">//初始化二维数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] arrays_two = <span class="keyword">new</span> <span class="keyword">int</span>[lin][cow];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sum; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"please input the value and its position: "</span>);</span><br><span class="line">            <span class="keyword">int</span> num_v = scanner.nextInt();<span class="comment">//元素值</span></span><br><span class="line">            <span class="keyword">int</span> lin_l = scanner.nextInt();<span class="comment">//对应的行数</span></span><br><span class="line">            <span class="keyword">int</span> cow_c = scanner.nextInt();<span class="comment">//对应的列数</span></span><br><span class="line"></span><br><span class="line">            arrays_two[lin_l-<span class="number">1</span>][cow_c-<span class="number">1</span>] = num_v;</span><br><span class="line">        &#125;</span><br><span class="line">				<span class="comment">//输出二维数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : arrays_two) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints) &#123;</span><br><span class="line">                System.out.print(anInt+<span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        初始化稀疏数组，其中行数为有效数字个数+1，列数固定3列</span></span><br><span class="line"><span class="comment">        其中第一行存放稀疏数组的有效值个数，行数，列数</span></span><br><span class="line"><span class="comment">        其余行存放对应的有效值以及其行列数</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">int</span>[][] arrays_xishu = <span class="keyword">new</span> <span class="keyword">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        arrays_xishu[<span class="number">0</span>][<span class="number">0</span>] = sum;</span><br><span class="line">        arrays_xishu[<span class="number">0</span>][<span class="number">1</span>] = arrays_two.length;</span><br><span class="line">        arrays_xishu[<span class="number">0</span>][<span class="number">2</span>] = arrays_two[<span class="number">0</span>].length;</span><br><span class="line">        <span class="comment">//遍历原数组，将有效值存放于稀疏数组中</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrays_two.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arrays_two[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arrays_two[i][j]!=<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    count += <span class="number">1</span>;</span><br><span class="line">                    arrays_xishu[count][<span class="number">0</span>] = arrays_two[i][j];</span><br><span class="line">                    arrays_xishu[count][<span class="number">1</span>] = i+<span class="number">1</span>;</span><br><span class="line">                    arrays_xishu[count][<span class="number">2</span>] = j+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        System.out.println(<span class="string">"稀疏数组如下所示："</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : arrays_xishu) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints) &#123;</span><br><span class="line">                System.out.print(anInt+<span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第二章：面向对象思想"><a href="#第二章：面向对象思想" class="headerlink" title="第二章：面向对象思想"></a>第二章：面向对象思想</h2><h3 id="面向对象和类"><a href="#面向对象和类" class="headerlink" title="面向对象和类"></a>面向对象和类</h3><ul>
<li><p>构造函数</p>
<ul>
<li>必须和类名一样，且没有返回值。</li>
<li><font color ="ff0000">new 本质是在调用构造方法，初始化对象的值。</font></li>
<li>定义有参构造之后，若想使用无参构造，需显示定义一个无参构造。</li>
</ul>
</li>
<li><p>析构函数</p>
<p>Java不存在析构函数,Java具有内存回收机制，当变量退出其生命周期时，JVM会自动识别并调用垃圾回收器GC。</p>
</li>
<li><p>Java类访问权限</p>
<table>
<thead>
<tr>
<th></th>
<th>同一个类</th>
<th>同一个包</th>
<th>不同包的子类</th>
<th>不同包的非子类</th>
</tr>
</thead>
<tbody><tr>
<td>private</td>
<td>✓</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>default</td>
<td>✓</td>
<td>✓</td>
<td></td>
<td></td>
</tr>
<tr>
<td>protected</td>
<td>✓</td>
<td>✓</td>
<td>✓</td>
<td></td>
</tr>
<tr>
<td>public</td>
<td>✓</td>
<td>✓</td>
<td>✓</td>
<td>✓</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p><strong>遵循原则：高内聚，低耦合</strong></p>
<ul>
<li>保护属性信息：类的成员属性是私有的private<ul>
<li>获取类成员属性可以使用getter &amp; setter 方法，对应IDEA工具 mac快捷键：command+return；windows快捷键：alt+inter</li>
</ul>
</li>
<li>公开行为信息：类的方法是公有的public</li>
<li>this关键字<ul>
<li>this负责指向本类中的成员变量</li>
<li>this负责指向本类中的成员方法</li>
<li>this可以代替本类的构造函数</li>
</ul>
</li>
<li>this示例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OO类声明</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OOExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       gets obj = <span class="keyword">new</span> gets(<span class="number">5</span>);  </span><br><span class="line">       System.out.println(obj.sum());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//gets类声明</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">gets</span> </span>&#123;</span><br><span class="line">    <span class="comment">//设定私有变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> m,n;</span><br><span class="line">    <span class="comment">//类的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">gets</span><span class="params">(<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(m,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">gets</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.m=m;</span><br><span class="line">        <span class="keyword">this</span>.n=n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义sum方法调用add方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.add(m,n);<span class="comment">//可省略this因为不会引起歧义</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m+n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul>
<li><p>继承是类与类之间的一种关系，除此之外，类与类之间还可以存在依赖、组合、聚合等关系。</p>
</li>
<li><p>继承关系的两个类，一个为子类（派生类），一个为父类（基类）。子类继承父类，使用关键字<strong>extendes</strong>。</p>
</li>
<li><div><font color = "ff0000">Java中类只有单继承，没有多继承,其中object类是所有类的父类。</font></div>

</li>
</ul>
<p><strong>super关键字</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Person无参构造"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> String name = <span class="string">"zhangsan"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">   	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      	<span class="comment">//！！默认隐藏调用父类的！无参！构造函数！！</span></span><br><span class="line">      	<span class="comment">//如果调用有参构造函数，需显示声明super()方法</span></span><br><span class="line">      	<span class="comment">//super();</span></span><br><span class="line">        System.out.println(<span class="string">"Student无参构造"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">"bushizhangsan"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(name);<span class="comment">//输出当前name</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name);<span class="comment">//输出当前类对应的name</span></span><br><span class="line">        System.out.println(<span class="keyword">super</span>.name);<span class="comment">//输出父类对应的name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.test(<span class="string">"张三"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//程序输出</span></span><br><span class="line">Person无参构造</span><br><span class="line">Student无参构造</span><br><span class="line">张三</span><br><span class="line">bushizhangsan</span><br><span class="line">zhangsan</span><br></pre></td></tr></table></figure>

<p><strong>方法重写</strong></p>
<ol>
<li>方法名必须相同，参数列表必须相同。</li>
<li>修饰符：继承子类属性的范围相较父类属性可以扩大，但不可以缩小：public&gt;protected&gt;default&gt;private</li>
<li>抛出异常范围：可以被缩小，但不可以被扩大：ClassNotFoundException –&gt; Exception(大)</li>
<li>重写前后子类方法名必须和父类一致，但是方法体可以不同。</li>
</ol>
<ul>
<li><p>静态方法重写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Person=&gt;test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Student=&gt;test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.test();</span><br><span class="line">        Person person = <span class="keyword">new</span> Student();<span class="comment">//延伸创建父类对象</span></span><br><span class="line">        person.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">Student=&gt;test</span><br><span class="line">Person=&gt;test</span><br></pre></td></tr></table></figure>
</li>
<li><p>非静态方法重写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Person=&gt;test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  	<span class="meta">@Override</span><span class="comment">//注解：有功能的注释</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Student=&gt;test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.test();</span><br><span class="line">        Person person = <span class="keyword">new</span> Student();<span class="comment">//重写父类方法</span></span><br><span class="line">        person.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">Student=&gt;test</span><br><span class="line">Student=&gt;test</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ul>
<li><p>多态即同一种对象可以根据发送对象的不同而采取多种不同的行为方式，即对函数而言，<font color="ff0000">取决于左部类型信息。</font></p>
</li>
<li><p>多态存在条件：有继承关系、子类重写父类方法、父类引用子类对象。</p>
</li>
<li><p>多态本质是父类引用指向子类的对象，子类转换为父类，向上转型；<font color ="ff0000">父类转换为子类，向下转型，须强制转换。</font></p>
</li>
</ul>
<p><strong>static关键词</strong></p>
<ul>
<li><p>static静态代码块</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  	<span class="comment">//1.随类加载时一同执行，且只执行一次</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  	<span class="comment">//2.完成类的初始操作</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"匿名代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  	<span class="comment">//3.当类的初始操作完成后执行构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        System.out.println(<span class="string">"==============="</span>);</span><br><span class="line">        Person person2 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">静态代码块</span><br><span class="line">匿名代码块</span><br><span class="line">构造方法</span><br><span class="line">===============</span><br><span class="line">匿名代码块</span><br><span class="line">构造方法</span><br></pre></td></tr></table></figure>
</li>
<li><p>static静态导入包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"匿名代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(random());        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">静态代码块</span><br><span class="line"><span class="number">0.9107008895679277</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ul>
<li><p>抽象类不能使用new关键字来创建对象，只能通过子类继承来实现。</p>
</li>
<li><p>抽象方法只有方法的声明，没有方法的实现。</p>
</li>
<li><p><strong>abstract</strong>修饰符可以用来修饰方法也可以用来修饰类，若修饰方法，则该方法是抽象方法；若修饰类，则该类是抽象类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span></span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Action</span></span>&#123;</span><br><span class="line">  	<span class="meta">@Override</span></span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">//方法实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>注：抽象类中也是可以有构造函数的。虽然抽象类不能实例化，但是抽象类被继承之后，它的派生类可以实例化；而派生类在实例化调用构造函数的时候会先调用基类中的构造函数，所以抽象类的构造函数也是可以被调用的，所以抽象类中可以有构造函数。</p>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><table>
<thead>
<tr>
<th>JavaOOD思想</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>普通类</td>
<td>只有具体的实现</td>
</tr>
<tr>
<td>抽象类</td>
<td>具体实现和规范（抽象方法）</td>
</tr>
<tr>
<td>接口</td>
<td>只有规范</td>
</tr>
</tbody></table>
<ul>
<li><p>接口是一种规范，定义了一组规则，体现了现实世界中“如果你是…则必须能…”的思想。</p>
</li>
<li><p><font color="ff0000">接口本质是一种契约</font>，相当于一种Java的法律规范。</p>
</li>
<li><p>声明类的关键字是class，声明接口的关键字是<strong>interface</strong>。</p>
</li>
<li><p>接口中所有的方法均默认<strong>public abstract</strong>,所有常量默认<strong>public static final</strong>。</p>
</li>
<li><p>实现接口方法通过子类<strong>implements</strong>关键词实现，<font color="ff0000">同时子类可以实现多个接口。</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">userService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口实现</span></span><br><span class="line"><span class="keyword">import</span> .../.userService;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> <span class="keyword">implements</span> <span class="title">userService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义内部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> id = <span class="number">10</span> ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"this is Outer"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"this is Inner"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//通过内部类获取外部私有信息</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getID</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用内部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer.Inner inner = <span class="keyword">new</span> Outer.Inner();</span><br><span class="line">        inner.getID();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>

<h2 id="第三章：Java常用类"><a href="#第三章：Java常用类" class="headerlink" title="第三章：Java常用类"></a>第三章：Java常用类</h2><ol>
<li><p>Math–BigDecimal</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(<span class="string">"1234"</span>);</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(<span class="string">"1234"</span>);</span><br><span class="line">        BigDecimal b3 = b1.divide(b2,<span class="number">3</span>,BigDecimal.ROUND_HALF_DOWN);</span><br><span class="line">        System.out.println(b3);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>String</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String a = <span class="string">"123;456;789;123 "</span>;</span><br><span class="line">		System.out.println(a.charAt(<span class="number">0</span>)); <span class="comment">// 返回第0个元素</span></span><br><span class="line">		System.out.println(a.indexOf(<span class="string">";"</span>)); <span class="comment">// 返回第一个;的位置</span></span><br><span class="line">		System.out.println(a.concat(<span class="string">";000"</span>)); <span class="comment">// 连接一个新字符串并返回，a不变</span></span><br><span class="line">		System.out.println(a.contains(<span class="string">"000"</span>)); <span class="comment">// 判断a是否包含000</span></span><br><span class="line">		System.out.println(a.endsWith(<span class="string">"000"</span>)); <span class="comment">// 判断a是否以000结尾</span></span><br><span class="line">		System.out.println(a.equals(<span class="string">"000"</span>)); <span class="comment">// 判断是否等于000</span></span><br><span class="line">		System.out.println(a.equalsIgnoreCase(<span class="string">"000"</span>));<span class="comment">// 判断在忽略大小写情况下是否等于000</span></span><br><span class="line">		System.out.println(a.length()); <span class="comment">// 返回a长度</span></span><br><span class="line">		System.out.println(a.trim()); <span class="comment">// 返回a去除前后空格后的字符串，a不变</span></span><br><span class="line">		String[] b = a.split(<span class="string">";"</span>); <span class="comment">// 将a字符串按照;分割成数组</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.length; i++) &#123;</span><br><span class="line">			System.out.println(b[i]);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">"==================="</span>);</span><br><span class="line"></span><br><span class="line">		System.out.println(a.substring(<span class="number">2</span>, <span class="number">5</span>)); <span class="comment">// 截取a的第2个到第5个字符 a不变</span></span><br><span class="line">		System.out.println(a.replace(<span class="string">"1"</span>, <span class="string">"a"</span>));</span><br><span class="line">		System.out.println(a.replaceAll(<span class="string">"1"</span>, <span class="string">"a"</span>)); <span class="comment">// replaceAll第一个参数是正则表达式</span></span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">"==================="</span>);</span><br><span class="line"></span><br><span class="line">		String s1 = <span class="string">"12345?6789"</span>;</span><br><span class="line">		String s2 = s1.replace(<span class="string">"?"</span>, <span class="string">"a"</span>);</span><br><span class="line">		String s3 = s1.replaceAll(<span class="string">"[?]"</span>, <span class="string">"a"</span>);</span><br><span class="line">		<span class="comment">// 这里的[?] 才表示字符问号，这样才能正常替换。不然在正则中会有特殊的意义就会报异常</span></span><br><span class="line">		System.out.println(s2);</span><br><span class="line">		System.out.println(s3);</span><br><span class="line">		System.out.println(s1.replaceAll(<span class="string">"[\\d]"</span>, <span class="string">"a"</span>)); <span class="comment">//将s1内所有数字替换为a并输出，s1的值未改变。</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Time</p>
</li>
<li><p>Format</p>
</li>
</ol>
<h2 id="第四章：Java异常处理"><a href="#第四章：Java异常处理" class="headerlink" title="第四章：Java异常处理"></a>第四章：Java异常处理</h2><ul>
<li><p>Java异常包含<strong>Throwable、Error和Exception</strong>三类，其中<strong>Throwable</strong>是所有错误的祖先，<strong>Error</strong>是系统内部错误，<strong>Exception</strong>是程序有关的异常。</p>
</li>
<li><p>Java采取<strong>try-catch-finally框架</strong>处理异常结构，其中try负责正常的业务逻辑代码，catch负责捕捉try抛出的异常类型，finally则在try-catch最后执行。<strong><font color ="ff0000">try必须存在，catch和finally至少有一个</font></strong>，且三个模块均可在内部嵌套<strong>try-catch-finally框架</strong>。</p>
</li>
<li><p>catch块可类比case，可以有多个，进入入口取决于try抛出的异常，当抛出异常同某个catch块中的形参类型一致，则执行该catch块代码。<strong><font color ="ff0000">进入catch块后，并不会返回到try发生的位置，也不会执行后续的catch块，一个异常只能进入一个catch块。</font></strong></p>
</li>
<li><p>throws异常处理中，若该方法被覆盖，<strong><font color="ff0000">覆盖它的方法必须抛出相同的异常，或者异常的子类。</font></strong>即父类方法抛出的异常，子类方法必须同样抛出那些异常或者异常的真子集，也就是不能抛出新的异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> a = <span class="number">5</span>/<span class="number">2</span>; <span class="comment">//无异常</span></span><br><span class="line">			System.out.println(<span class="string">"a is "</span> + a);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span>(Exception ex)</span><br><span class="line">		&#123;</span><br><span class="line">			ex.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">finally</span></span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(<span class="string">"Phrase 1 is over"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">try</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> a = <span class="number">5</span>/<span class="number">0</span>; <span class="comment">//ArithmeticException</span></span><br><span class="line">			System.out.println(<span class="string">"a is "</span> + a);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span>(Exception ex)</span><br><span class="line">		&#123;</span><br><span class="line">			ex.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">finally</span></span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(<span class="string">"Phrase 2 is over"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">try</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> a = <span class="number">5</span>/<span class="number">0</span>; <span class="comment">//ArithmeticException</span></span><br><span class="line">			System.out.println(<span class="string">"a is "</span> + a);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span>(Exception ex)</span><br><span class="line">		&#123;</span><br><span class="line">			ex.printStackTrace();</span><br><span class="line">			<span class="keyword">int</span> a = <span class="number">5</span>/<span class="number">0</span>; <span class="comment">//ArithmeticException</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">finally</span></span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(<span class="string">"Phrase 3 is over"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="第五章：Java文件读写"><a href="#第五章：Java文件读写" class="headerlink" title="第五章：Java文件读写"></a>第五章：Java文件读写</h2><h3 id="Java-IO"><a href="#Java-IO" class="headerlink" title="Java - IO"></a>Java - IO</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileAttributeTest</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">	<span class="comment">//创建目录</span></span><br><span class="line">	File d=<span class="keyword">new</span> File(<span class="string">"c:/temp"</span>);</span><br><span class="line">	<span class="keyword">if</span>(!d.exists())</span><br><span class="line">	&#123;</span><br><span class="line">		d.mkdirs();  <span class="comment">//mkdir 创建单级目录  mkdirs 连续创建多级目录</span></span><br><span class="line">	&#125;</span><br><span class="line">	System.out.println(<span class="string">"Is d directory? "</span> + d.isDirectory());</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//创建文件  </span></span><br><span class="line">    File f=<span class="keyword">new</span> File(<span class="string">"C:/temp/abc.txt"</span>);    </span><br><span class="line">    <span class="keyword">if</span>(!f.exists())</span><br><span class="line">    &#123;    	</span><br><span class="line">      <span class="keyword">try</span></span><br><span class="line">      &#123;</span><br><span class="line">        f.createNewFile(); <span class="comment">//创建abc.txt</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span>(IOException e)&#123; <span class="comment">//可能会因为权限不足或磁盘已满报错</span></span><br><span class="line">    	  e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输出文件相关属性</span></span><br><span class="line">    System.out.println(<span class="string">"Is f file? "</span> + f.isFile());</span><br><span class="line">    System.out.println(<span class="string">"Name: "</span>+f.getName());</span><br><span class="line">    System.out.println(<span class="string">"Parent: "</span>+f.getParent());</span><br><span class="line">    System.out.println(<span class="string">"Path: "</span>+f.getPath());</span><br><span class="line">    System.out.println(<span class="string">"Size: "</span>+f.length()+<span class="string">" bytes"</span>);</span><br><span class="line">    System.out.println(<span class="string">"Last modified time: "</span>+f.lastModified()+<span class="string">"ms"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//遍历d目录下所有的文件信息</span></span><br><span class="line">    System.out.println(<span class="string">"list files in d directory"</span>);</span><br><span class="line">    File[] fs = d.listFiles();  <span class="comment">//列出d目录下所有的子文件，不包括子目录下的文件</span></span><br><span class="line">    <span class="keyword">for</span>(File f1:fs)</span><br><span class="line">    &#123;</span><br><span class="line">    	System.out.println(f1.getPath());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//f.delete(); //删除此文件</span></span><br><span class="line">    <span class="comment">//d.delete(); //删除目录</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Java-NIO"><a href="#Java-NIO" class="headerlink" title="Java - NIO"></a>Java - NIO</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.DirectoryStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.LinkOption;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.StandardCopyOption;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.attribute.BasicFileAttributes;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilesTest</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] a)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		moveFile();</span><br><span class="line">		fileAttributes();</span><br><span class="line">		createDirectory();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">moveFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Path from = Paths.get(<span class="string">"c:/temp"</span>, <span class="string">"abc.txt"</span>);</span><br><span class="line">		<span class="comment">//移动c:/temp/abc.txt到c:/temp/test/def.txt，如目标文件已存在，就替换</span></span><br><span class="line">		Path to = from.getParent().resolve(<span class="string">"test/def.txt"</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//文件的大小bytes</span></span><br><span class="line">			System.out.println(Files.size(from));</span><br><span class="line">			<span class="comment">//调用文件移动方法  如果目标文件已经存在，就替换</span></span><br><span class="line">			Files.move(from, to, StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			System.err.println(<span class="string">"移动文件错误"</span> + e.getMessage());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fileAttributes</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Path path = Paths.get(<span class="string">"c:/temp"</span>);</span><br><span class="line">		<span class="comment">//1</span></span><br><span class="line">		System.out.println(Files.isDirectory(path, LinkOption.NOFOLLOW_LINKS));</span><br><span class="line">		<span class="comment">//2</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//获得文件的基础属性</span></span><br><span class="line">			BasicFileAttributes attributes = Files.readAttributes(path, BasicFileAttributes<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">			System.out.println(attributes.isDirectory());</span><br><span class="line">			System.out.println(<span class="keyword">new</span> Date(attributes.lastModifiedTime().toMillis()).toLocaleString());</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createDirectory</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Path path = Paths.get(<span class="string">"c:/temp/test"</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//创建文件夹</span></span><br><span class="line">			<span class="keyword">if</span>(Files.notExists(path))&#123;</span><br><span class="line">				Files.createDirectories(path);</span><br><span class="line">				System.out.println(<span class="string">"create dir"</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				System.out.println(<span class="string">"dir exists"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			Path path2 = path.resolve(<span class="string">"A.java"</span>); </span><br><span class="line">			Path path3 = path.resolve(<span class="string">"B.java"</span>);</span><br><span class="line">			Path path4 = path.resolve(<span class="string">"C.txt"</span>);</span><br><span class="line">			Path path5 = path.resolve(<span class="string">"D.jpg"</span>);</span><br><span class="line">			Files.createFile(path2);</span><br><span class="line">			Files.createFile(path3);</span><br><span class="line">			Files.createFile(path4);</span><br><span class="line">			Files.createFile(path5);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//不加条件遍历</span></span><br><span class="line">			DirectoryStream&lt;Path&gt; paths = Files.newDirectoryStream(path);</span><br><span class="line">			<span class="keyword">for</span>(Path p : paths)&#123;</span><br><span class="line">				System.out.println(p.getFileName());</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//创建一个带有过滤器,过滤文件名以java txt结尾的文件</span></span><br><span class="line">			DirectoryStream&lt;Path&gt; pathsFilter = Files.newDirectoryStream(path, <span class="string">"*.&#123;java,txt&#125;"</span>);</span><br><span class="line">			<span class="keyword">for</span>(Path p : pathsFilter)&#123;</span><br><span class="line">				System.out.println(p.getFileName());</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="第六章：Java常用数据结构"><a href="#第六章：Java常用数据结构" class="headerlink" title="第六章：Java常用数据结构"></a>第六章：Java常用数据结构</h2><h3 id="列表-List"><a href="#列表-List" class="headerlink" title="列表 List"></a>列表 List</h3><ul>
<li><p>List是有序的Collection，允许重复元素。</p>
</li>
<li><p>List主要实现：<strong>ArrayList</strong>（非同步）、<strong>LinkedList</strong>（非同步）、<strong>Vector</strong>（同步）</p>
<ol>
<li><p><strong>ArrayList</strong></p>
<ul>
<li><p><strong>以数组实现的列表，不支持同步</strong></p>
<p>• <strong>List list = Collections.synchronizedList(new ArrayList(…));</strong></p>
</li>
<li><p><strong>利用索引位置可以快速定位访问</strong></p>
</li>
<li><p><strong>不适合指定位置的插入、删除操作</strong></p>
</li>
<li><p><strong>适合变动不大，主要用于查询的数据</strong></p>
</li>
<li><p><strong>和Java数组相比，其容量是可动态调整的</strong></p>
</li>
<li><p><strong>ArrayList在元素填满容器时会自动扩充容器大小的50%</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="comment">//Vector 几乎和ArrayList一样，除了Vector本身是同步的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListTest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] a)</span> </span>&#123;  </span><br><span class="line">	    ArrayList&lt;Integer&gt; al = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();  </span><br><span class="line">	    al.add(<span class="number">3</span>);  </span><br><span class="line">	    al.add(<span class="number">2</span>);          </span><br><span class="line">	    al.add(<span class="number">1</span>);  </span><br><span class="line">	    al.add(<span class="number">4</span>);  </span><br><span class="line">	    al.add(<span class="number">5</span>);  </span><br><span class="line">	    al.add(<span class="number">6</span>);  </span><br><span class="line">	    al.add(<span class="keyword">new</span> Integer(<span class="number">6</span>));  </span><br><span class="line">	  </span><br><span class="line">	    System.out.print(<span class="string">"The third element is  "</span>);</span><br><span class="line">	    System.out.println(al.get(<span class="number">3</span>));</span><br><span class="line">	    al.remove(<span class="number">3</span>);  <span class="comment">//删除第四个元素，后面元素往前挪动</span></span><br><span class="line">	    al.add(<span class="number">3</span>, <span class="number">9</span>);  <span class="comment">//将9插入到第4个元素，后面元素往后挪动</span></span><br><span class="line">	    </span><br><span class="line">	    System.out.println(<span class="string">"======遍历方法============="</span>);</span><br><span class="line">	    </span><br><span class="line">	    ArrayList&lt;Integer&gt; as = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(<span class="number">100000</span>);</span><br><span class="line">	    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100000</span>; i++)</span><br><span class="line">	    &#123;</span><br><span class="line">	    	as.add(i);</span><br><span class="line">	    &#125;</span><br><span class="line">    	<span class="comment">//三种遍历方式性能比较</span></span><br><span class="line">    	<span class="comment">//for-each &gt; 随机索引值遍历 &gt; 迭代器遍历</span></span><br><span class="line">	    traverseByIterator(as);</span><br><span class="line">	    traverseByIndex(as);</span><br><span class="line">	    traverseByFor(as);    </span><br><span class="line">	&#125;  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">traverseByIterator</span><span class="params">(ArrayList&lt;Integer&gt; al)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">		System.out.println(<span class="string">"============迭代器遍历=============="</span>); </span><br><span class="line">	    Iterator&lt;Integer&gt; iter1 = al.iterator();  </span><br><span class="line">	    <span class="keyword">while</span>(iter1.hasNext())&#123;  </span><br><span class="line">	        iter1.next();  </span><br><span class="line">	    &#125;</span><br><span class="line">		<span class="keyword">long</span> endTime = System.nanoTime();</span><br><span class="line">	    <span class="keyword">long</span> duration = endTime - startTime;</span><br><span class="line">	    System.out.println(duration + <span class="string">"纳秒"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">traverseByIndex</span><span class="params">(ArrayList&lt;Integer&gt; al)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">		System.out.println(<span class="string">"============随机索引值遍历=============="</span>); </span><br><span class="line">	    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;al.size();i++)</span><br><span class="line">	    &#123;</span><br><span class="line">	    	al.get(i);</span><br><span class="line">	    &#125;</span><br><span class="line">		<span class="keyword">long</span> endTime = System.nanoTime();</span><br><span class="line">	    <span class="keyword">long</span> duration = endTime - startTime;</span><br><span class="line">	    System.out.println(duration + <span class="string">"纳秒"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">traverseByFor</span><span class="params">(ArrayList&lt;Integer&gt; al)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">		System.out.println(<span class="string">"============for循环遍历=============="</span>); </span><br><span class="line">	    <span class="keyword">for</span>(Integer item : al)</span><br><span class="line">	    &#123;</span><br><span class="line">	    	;</span><br><span class="line">	    &#125;</span><br><span class="line">		<span class="keyword">long</span> endTime = System.nanoTime();</span><br><span class="line">	    <span class="keyword">long</span> duration = endTime - startTime;</span><br><span class="line">	    System.out.println(duration + <span class="string">"纳秒"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>LinkedList</strong></p>
<ul>
<li><p><strong>以双向链表实现的列表，不支持同步</strong></p>
<p>• <strong>List list = Collections.synchronizedList(new LinkedList(…));</strong></p>
</li>
<li><p><strong>可被当作堆栈、队列和双端队列进行操作</strong></p>
</li>
<li><p><strong>顺序访问高效，随机访问较差，中间插入和删除高效</strong></p>
</li>
<li><p><strong>适用于经常变化的数据</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		LinkedList&lt;Integer&gt; ll = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();  </span><br><span class="line">	    ll.add(<span class="number">3</span>);  </span><br><span class="line">	    ll.add(<span class="number">2</span>);  </span><br><span class="line">	    ll.add(<span class="number">5</span>);  </span><br><span class="line">	    ll.add(<span class="number">6</span>);  </span><br><span class="line">	    ll.add(<span class="number">6</span>);  </span><br><span class="line">	    System.out.println(ll.size());</span><br><span class="line">	    ll.addFirst(<span class="number">9</span>);  <span class="comment">//在头部增加9</span></span><br><span class="line">	    ll.add(<span class="number">3</span>, <span class="number">10</span>);   <span class="comment">//将10插入到第四个元素，四以及后续的元素往后挪动</span></span><br><span class="line">	    ll.remove(<span class="number">3</span>);    <span class="comment">//将第四个元素删除</span></span><br><span class="line">	    </span><br><span class="line">	    LinkedList&lt;Integer&gt; list = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">	    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100000</span>; i++)</span><br><span class="line">	    &#123;</span><br><span class="line">	    	list.add(i);</span><br><span class="line">	    &#125;</span><br><span class="line">    	<span class="comment">//三种遍历方式性能比较</span></span><br><span class="line">    	<span class="comment">//for-each &gt; 迭代器遍历 &gt; 随机索引值遍历</span></span><br><span class="line">	    traverseByIterator(list);</span><br><span class="line">	    traverseByIndex(list);</span><br><span class="line">	    traverseByFor(list);    </span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">traverseByIterator</span><span class="params">(LinkedList&lt;Integer&gt; list)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">		System.out.println(<span class="string">"============迭代器遍历=============="</span>); </span><br><span class="line">	    Iterator&lt;Integer&gt; iter1 = list.iterator();  </span><br><span class="line">	    <span class="keyword">while</span>(iter1.hasNext())&#123;  </span><br><span class="line">	        iter1.next();  </span><br><span class="line">	    &#125;</span><br><span class="line">		<span class="keyword">long</span> endTime = System.nanoTime();</span><br><span class="line">	    <span class="keyword">long</span> duration = endTime - startTime;</span><br><span class="line">	    System.out.println(duration + <span class="string">"纳秒"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">traverseByIndex</span><span class="params">(LinkedList&lt;Integer&gt; list)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">		System.out.println(<span class="string">"============随机索引值遍历=============="</span>); </span><br><span class="line">	    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;list.size();i++)</span><br><span class="line">	    &#123;</span><br><span class="line">	    	list.get(i);</span><br><span class="line">	    &#125;</span><br><span class="line">		<span class="keyword">long</span> endTime = System.nanoTime();</span><br><span class="line">	    <span class="keyword">long</span> duration = endTime - startTime;</span><br><span class="line">	    System.out.println(duration + <span class="string">"纳秒"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">traverseByFor</span><span class="params">(LinkedList&lt;Integer&gt; list)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">		System.out.println(<span class="string">"============for循环遍历=============="</span>); </span><br><span class="line">	    <span class="keyword">for</span>(Integer item : list)</span><br><span class="line">	    &#123;</span><br><span class="line">	    	;</span><br><span class="line">	    &#125;</span><br><span class="line">		<span class="keyword">long</span> endTime = System.nanoTime();</span><br><span class="line">	    <span class="keyword">long</span> duration = endTime - startTime;</span><br><span class="line">	    System.out.println(duration + <span class="string">"纳秒"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><font color ="ff0000">ArrayList适用于较多的查询情况，LinkedList适用于较多的增删情况。</font></strong></p>
</li>
<li><p><strong>Vector</strong></p>
<ul>
<li><p><strong>和ArrayList类似，可变数组实现的列表</strong></p>
</li>
<li><p><strong>Vector同步，适合在多线程下使用</strong></p>
</li>
<li><p><strong>原先不属于JCF框架，属于Java最早的数据结构，性能较差</strong></p>
</li>
<li><p><strong>从JDK1.2开始，Vector被重写，并纳入到JCF</strong></p>
</li>
<li><p><strong>官方文档建议在非同步情况下，优先采用ArrayList</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VectorTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Vector&lt;Integer&gt; v = <span class="keyword">new</span> Vector&lt;Integer&gt;();</span><br><span class="line">		v.add(<span class="number">1</span>);</span><br><span class="line">		v.add(<span class="number">2</span>);</span><br><span class="line">		v.add(<span class="number">3</span>);</span><br><span class="line">		v.remove(<span class="number">2</span>);</span><br><span class="line">		v.add(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">		System.out.println(v.size());</span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">"======遍历方法============="</span>);</span><br><span class="line"></span><br><span class="line">		Vector&lt;Integer&gt; v2 = <span class="keyword">new</span> Vector&lt;Integer&gt;(<span class="number">100000</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">			v2.add(i);</span><br><span class="line">		&#125;</span><br><span class="line">    <span class="comment">//四种遍历方式性能比较</span></span><br><span class="line">    <span class="comment">//for-each ≈ Enumeration遍历 &gt; 迭代器遍历 &gt; 随机索引值遍历</span></span><br><span class="line">		traverseByIterator(v2);</span><br><span class="line">		traverseByIndex(v2);</span><br><span class="line">		traverseByFor(v2);</span><br><span class="line">		traverseByEnumeration(v2);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">traverseByIterator</span><span class="params">(Vector&lt;Integer&gt; v)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">		System.out.println(<span class="string">"============迭代器遍历=============="</span>);</span><br><span class="line">		Iterator&lt;Integer&gt; iter1 = v.iterator();</span><br><span class="line">		<span class="keyword">while</span> (iter1.hasNext()) &#123;</span><br><span class="line">			iter1.next();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">long</span> endTime = System.nanoTime();</span><br><span class="line">		<span class="keyword">long</span> duration = endTime - startTime;</span><br><span class="line">		System.out.println(duration + <span class="string">"纳秒"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">traverseByIndex</span><span class="params">(Vector&lt;Integer&gt; v)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">		System.out.println(<span class="string">"============随机索引值遍历=============="</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); i++) &#123;</span><br><span class="line">			v.get(i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">long</span> endTime = System.nanoTime();</span><br><span class="line">		<span class="keyword">long</span> duration = endTime - startTime;</span><br><span class="line">		System.out.println(duration + <span class="string">"纳秒"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">traverseByFor</span><span class="params">(Vector&lt;Integer&gt; v)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">		System.out.println(<span class="string">"============for循环遍历=============="</span>);</span><br><span class="line">		<span class="keyword">for</span> (Integer item : v) &#123;</span><br><span class="line">			;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">long</span> endTime = System.nanoTime();</span><br><span class="line">		<span class="keyword">long</span> duration = endTime - startTime;</span><br><span class="line">		System.out.println(duration + <span class="string">"纳秒"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">traverseByEnumeration</span><span class="params">(Vector&lt;Integer&gt; v)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">		System.out.println(<span class="string">"============Enumeration遍历=============="</span>);</span><br><span class="line">		<span class="keyword">for</span> (Enumeration&lt;Integer&gt; enu = v.elements(); enu.hasMoreElements();) &#123;</span><br><span class="line">			enu.nextElement();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">long</span> endTime = System.nanoTime();</span><br><span class="line">		<span class="keyword">long</span> duration = endTime - startTime;</span><br><span class="line">		System.out.println(duration + <span class="string">"纳秒"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ul>
<h3 id="集合-Set"><a href="#集合-Set" class="headerlink" title="集合 Set"></a>集合 Set</h3><ul>
<li><p>集合性质</p>
<ul>
<li><p>确定性：对任意对象都能判定其是否属于某一个集合</p>
</li>
<li><p>互异性：集合内每个元素都是无差异的，注意是内容差异</p>
</li>
<li><p>无序性：集合内的顺序无关</p>
</li>
</ul>
</li>
<li><p>List主要实现：<strong>HashSet</strong> （基于散列函数的集合，无序，不支持同步）、<strong>TreeSet</strong> (基于树结构的集合，可排序的，不支持同步)、<strong>LinkedHashSet</strong>(基于散列函数和双向链表的集合，可排序的，不支持同步)。</p>
<ol>
<li><p><strong>HashSet</strong></p>
<ul>
<li><p><strong>基于HashMap实现的，可以容纳null元素, 不支持同步</strong></p>
<p>• <strong>Set s = Collections.synchronizedSet(new HashSet(…));</strong></p>
</li>
<li><p><strong>add 添加一个元素</strong></p>
</li>
<li><p><strong>clear 清除整个HashSet</strong></p>
</li>
<li><p><strong>contains 判定是否包含一个元素</strong></p>
</li>
<li><p><strong>remove 删除一个元素 size 大小</strong></p>
</li>
<li><p><strong>retainAll 计算两个集合交集</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetTest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		HashSet&lt;Integer&gt; hs = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">		hs.add(<span class="keyword">null</span>);</span><br><span class="line">		hs.add(<span class="number">1000</span>);</span><br><span class="line">		hs.add(<span class="number">20</span>);</span><br><span class="line">		hs.add(<span class="number">3</span>);</span><br><span class="line">		hs.add(<span class="number">40000</span>);</span><br><span class="line">		hs.add(<span class="number">5000000</span>);</span><br><span class="line">		hs.add(<span class="number">3</span>);                      <span class="comment">//3 重复</span></span><br><span class="line">		hs.add(<span class="keyword">null</span>);                   <span class="comment">//null重复</span></span><br><span class="line">		System.out.println(hs.size());  <span class="comment">//6</span></span><br><span class="line">		<span class="keyword">if</span>(!hs.contains(<span class="number">6</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			hs.add(<span class="number">6</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(hs.size());  <span class="comment">//7</span></span><br><span class="line">		hs.remove(<span class="number">4</span>);</span><br><span class="line">		System.out.println(hs.size());  <span class="comment">//6</span></span><br><span class="line">		<span class="comment">//hs.clear();</span></span><br><span class="line">		<span class="comment">//System.out.println(hs.size());  //0</span></span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"============for循环遍历=============="</span>); </span><br><span class="line">	    <span class="keyword">for</span>(Integer item : hs)</span><br><span class="line">	    &#123;</span><br><span class="line">	    	System.out.println(item);</span><br><span class="line">	    &#125;</span><br><span class="line">	    </span><br><span class="line">	    System.out.println(<span class="string">"============测试集合交集=============="</span>);</span><br><span class="line">	    </span><br><span class="line">	    HashSet&lt;String&gt; set1 = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">	    HashSet&lt;String&gt; set2 = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        set1.add(<span class="string">"a"</span>);</span><br><span class="line">        set1.add(<span class="string">"b"</span>);</span><br><span class="line">        set1.add(<span class="string">"c"</span>);</span><br><span class="line"></span><br><span class="line">        set2.add(<span class="string">"c"</span>);</span><br><span class="line">        set2.add(<span class="string">"d"</span>);</span><br><span class="line">        set2.add(<span class="string">"e"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//交集</span></span><br><span class="line">        set1.retainAll(set2);</span><br><span class="line">        System.out.println(<span class="string">"交集是 "</span>+set1);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"============测试多种遍历方法速度=============="</span>);</span><br><span class="line">		</span><br><span class="line">		HashSet&lt;Integer&gt; hs2 = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100000</span>;i++)	&#123;</span><br><span class="line">			hs2.add(i);</span><br><span class="line">		&#125;</span><br><span class="line">		traverseByIterator(hs2);</span><br><span class="line">		traverseByFor(hs2);		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">traverseByIterator</span><span class="params">(HashSet&lt;Integer&gt; hs)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">		System.out.println(<span class="string">"============迭代器遍历=============="</span>); </span><br><span class="line">	    Iterator&lt;Integer&gt; iter1 = hs.iterator();  </span><br><span class="line">	    <span class="keyword">while</span>(iter1.hasNext())&#123;  </span><br><span class="line">	        iter1.next();  </span><br><span class="line">	    &#125;</span><br><span class="line">		<span class="keyword">long</span> endTime = System.nanoTime();</span><br><span class="line">	    <span class="keyword">long</span> duration = endTime - startTime;</span><br><span class="line">	    System.out.println(duration + <span class="string">"纳秒"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">traverseByFor</span><span class="params">(HashSet&lt;Integer&gt; hs)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">		System.out.println(<span class="string">"============for循环遍历=============="</span>); </span><br><span class="line">	    <span class="keyword">for</span>(Integer item : hs)</span><br><span class="line">	    &#123;</span><br><span class="line">	    	;</span><br><span class="line">	    &#125;</span><br><span class="line">		<span class="keyword">long</span> endTime = System.nanoTime();</span><br><span class="line">	    <span class="keyword">long</span> duration = endTime - startTime;</span><br><span class="line">	    System.out.println(duration + <span class="string">"纳秒"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>LinkedHashSetTest</strong></p>
<ul>
<li><p><strong>继承HashSet，也是基于HashMap实现的，可以容纳null元素</strong></p>
</li>
<li><p><strong>不支持同步</strong></p>
<p>• <strong>Set s = Collections.synchronizedSet(new LinkedHashSet(…));</strong></p>
</li>
<li><p><strong>方法和HashSet基本一致</strong></p>
<p>• <strong>add, clear, contains, remove, size</strong></p>
</li>
<li><p><strong>通过一个双向链表维护插入顺序</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashSetTest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		LinkedHashSet&lt;Integer&gt; lhs = <span class="keyword">new</span> LinkedHashSet&lt;Integer&gt;();</span><br><span class="line">		lhs.add(<span class="keyword">null</span>);</span><br><span class="line">		lhs.add(<span class="number">1000</span>);</span><br><span class="line">		lhs.add(<span class="number">20</span>);</span><br><span class="line">		lhs.add(<span class="number">3</span>);</span><br><span class="line">		lhs.add(<span class="number">40000</span>);</span><br><span class="line">		lhs.add(<span class="number">5000000</span>);</span><br><span class="line">		lhs.add(<span class="number">3</span>);                      <span class="comment">//3 重复</span></span><br><span class="line">		lhs.add(<span class="keyword">null</span>);                   <span class="comment">//null 重复</span></span><br><span class="line">		System.out.println(lhs.size());  <span class="comment">//6</span></span><br><span class="line">		<span class="keyword">if</span>(!lhs.contains(<span class="number">6</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			lhs.add(<span class="number">6</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(lhs.size());  <span class="comment">//7</span></span><br><span class="line">		lhs.remove(<span class="number">4</span>);</span><br><span class="line">		System.out.println(lhs.size());  <span class="comment">//6</span></span><br><span class="line">		<span class="comment">//lhs.clear();</span></span><br><span class="line">		<span class="comment">//System.out.println(lhs.size());  //0</span></span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"============for循环遍历=============="</span>); </span><br><span class="line">	    <span class="keyword">for</span>(Integer item : lhs)</span><br><span class="line">	    &#123;</span><br><span class="line">	    	System.out.println(item);</span><br><span class="line">	    &#125;</span><br><span class="line">		</span><br><span class="line">		LinkedHashSet&lt;Integer&gt; lhs2 = <span class="keyword">new</span> LinkedHashSet&lt;Integer&gt;();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100000</span>;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			lhs2.add(i);</span><br><span class="line">		&#125;</span><br><span class="line">		traverseByIterator(lhs2);</span><br><span class="line">		traverseByFor(lhs2);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">traverseByIterator</span><span class="params">(LinkedHashSet&lt;Integer&gt; hs)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">		System.out.println(<span class="string">"============迭代器遍历=============="</span>); </span><br><span class="line">	    Iterator&lt;Integer&gt; iter1 = hs.iterator();  </span><br><span class="line">	    <span class="keyword">while</span>(iter1.hasNext())&#123;  </span><br><span class="line">	        iter1.next();  </span><br><span class="line">	    &#125;</span><br><span class="line">		<span class="keyword">long</span> endTime = System.nanoTime();</span><br><span class="line">	    <span class="keyword">long</span> duration = endTime - startTime;</span><br><span class="line">	    System.out.println(duration + <span class="string">"纳秒"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">traverseByFor</span><span class="params">(LinkedHashSet&lt;Integer&gt; hs)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">		System.out.println(<span class="string">"============for循环遍历=============="</span>); </span><br><span class="line">	    <span class="keyword">for</span>(Integer item : hs)</span><br><span class="line">	    &#123;</span><br><span class="line">	    	;</span><br><span class="line">	    &#125;</span><br><span class="line">		<span class="keyword">long</span> endTime = System.nanoTime();</span><br><span class="line">	    <span class="keyword">long</span> duration = endTime - startTime;</span><br><span class="line">	    System.out.println(duration + <span class="string">"纳秒"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>TreeSet</strong></p>
<ul>
<li><p><strong>基于TreeMap实现的，<font color ="ff0000">不可以容纳null元素</font>，不支持同步</strong></p>
<p>• <strong>SortedSet s = Collections.synchronizedSortedSet(new TreeSet(…));</strong></p>
</li>
<li><p><strong>add 添加一个元素</strong></p>
</li>
<li><p><strong>clear 清除整个TreeSet</strong></p>
</li>
<li><p><strong>contains 判定是否包含一个元素</strong></p>
</li>
<li><p><strong>remove 删除一个元素 size 大小</strong></p>
</li>
<li><p><strong>根据compareTo方法或指定Comparator排序</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetTest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		TreeSet&lt;Integer&gt; ts = <span class="keyword">new</span> TreeSet&lt;Integer&gt;();</span><br><span class="line">		<span class="comment">// ts.add(null);  错误，不支持null</span></span><br><span class="line">		ts.add(<span class="number">1000</span>);</span><br><span class="line">		ts.add(<span class="number">20</span>);</span><br><span class="line">		ts.add(<span class="number">3</span>);</span><br><span class="line">		ts.add(<span class="number">40000</span>);</span><br><span class="line">		ts.add(<span class="number">5000000</span>);</span><br><span class="line">		ts.add(<span class="number">3</span>);                      <span class="comment">//3 重复</span></span><br><span class="line">		System.out.println(ts.size());  <span class="comment">//5</span></span><br><span class="line">		<span class="keyword">if</span>(!ts.contains(<span class="number">6</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			ts.add(<span class="number">6</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(ts.size());  <span class="comment">//6</span></span><br><span class="line">		ts.remove(<span class="number">4</span>);</span><br><span class="line">		System.out.println(ts.size());  <span class="comment">//5</span></span><br><span class="line">		<span class="comment">//lhs.clear();</span></span><br><span class="line">		<span class="comment">//System.out.println(lhs.size());  //0</span></span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"============for循环遍历=============="</span>); </span><br><span class="line">	    <span class="keyword">for</span>(Integer item : ts)</span><br><span class="line">	    &#123;</span><br><span class="line">	    	System.out.println(item);</span><br><span class="line">	    &#125;</span><br><span class="line">	    </span><br><span class="line">		TreeSet&lt;Integer&gt; ts2 = <span class="keyword">new</span> TreeSet&lt;Integer&gt;();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100000</span>;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			ts2.add(i);</span><br><span class="line">		&#125;</span><br><span class="line">		traverseByIterator(ts2);</span><br><span class="line">		traverseByFor(ts2);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">traverseByIterator</span><span class="params">(TreeSet&lt;Integer&gt; hs)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">		System.out.println(<span class="string">"============迭代器遍历=============="</span>); </span><br><span class="line">	    Iterator&lt;Integer&gt; iter1 = hs.iterator();  </span><br><span class="line">	    <span class="keyword">while</span>(iter1.hasNext())&#123;  </span><br><span class="line">	        iter1.next();  </span><br><span class="line">	    &#125;</span><br><span class="line">		<span class="keyword">long</span> endTime = System.nanoTime();</span><br><span class="line">	    <span class="keyword">long</span> duration = endTime - startTime;</span><br><span class="line">	    System.out.println(duration + <span class="string">"纳秒"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">traverseByFor</span><span class="params">(TreeSet&lt;Integer&gt; hs)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">		System.out.println(<span class="string">"============for循环遍历=============="</span>); </span><br><span class="line">	    <span class="keyword">for</span>(Integer item : hs)</span><br><span class="line">	    &#123;</span><br><span class="line">	    	;</span><br><span class="line">	    &#125;</span><br><span class="line">		<span class="keyword">long</span> endTime = System.nanoTime();</span><br><span class="line">	    <span class="keyword">long</span> duration = endTime - startTime;</span><br><span class="line">	    System.out.println(duration + <span class="string">"纳秒"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>上述三种方法比较</strong></p>
<p>• <strong>HashSet是无序输出的, LinkedHashSet是按照插入的顺序进行遍历输出, TreeSet是按照所存储的对象大小升序输出</strong></p>
<p>• <strong>HashSet, LinkedHashSet, TreeSet的元素都只能是对象</strong></p>
<p>• <strong>HashSet和LinkedHashSet判定元素重复的原则</strong></p>
<p>​    –<strong>判定两个元素的hashCode返回值是否相同，若不同，返回false</strong></p>
<p>​    –<strong>若两者hashCode相同，判定equals方法，若不同，返回false；否则</strong></p>
<p>​    <strong>返回true。</strong> </p>
<p>​    –<strong>hashCode和equals方法是所有类都有的，因为Object类有</strong></p>
<p>• <strong>TreeSet判定元素重复的原则</strong></p>
<p>​    –<strong><font color ="ff0000">需要元素继承自Comparable接口</font></strong></p>
<p>​    –<strong>比较两个元素的compareTo方法</strong></p>
</li>
</ol>
</li>
</ul>
<h3 id="JCF中的工具类"><a href="#JCF中的工具类" class="headerlink" title="JCF中的工具类"></a>JCF中的工具类</h3><ul>
<li><p><strong>不存储数据，而是在数据容器上，实现高效操作</strong></p>
<ul>
<li><p>排序</p>
</li>
<li><p>搜索</p>
</li>
</ul>
</li>
<li><p><strong>Arrays类</strong>：处理对象是数组</p>
<p>–<strong>排序：对数组排序, sort/parallelSort</strong></p>
<p>–<strong>查找：从数组中查找一个元素, binarySearch</strong> </p>
<p>–<strong>批量拷贝：从源数组批量复制元素到目标数组, copyO。</strong> </p>
<p>–<strong>批量赋值：对数组进行批量赋值, fill</strong> </p>
<p>–<strong>等价性比较：判定两个数组内容是否相同, equals</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraysTest</span> </span>&#123; </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		testSort();</span><br><span class="line">		testSearch();</span><br><span class="line">		testCopy();</span><br><span class="line">		testFill();</span><br><span class="line">		testEquality();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Random r = <span class="keyword">new</span> Random();</span><br><span class="line">		<span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)	&#123;</span><br><span class="line">			a[i] = r.nextInt();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"===============测试排序================"</span>);</span><br><span class="line">		System.out.println(<span class="string">"排序前"</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)	&#123;</span><br><span class="line">			System.out.print(a[i] + <span class="string">","</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println();</span><br><span class="line">		System.out.println(<span class="string">"排序后"</span>);</span><br><span class="line">		Arrays.sort(a);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)	&#123;</span><br><span class="line">			System.out.print(a[i] + <span class="string">","</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println();		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSearch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Random r = <span class="keyword">new</span> Random();</span><br><span class="line">		<span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			a[i] = r.nextInt();</span><br><span class="line">		&#125;</span><br><span class="line">		a[a.length-<span class="number">1</span>] = <span class="number">10000</span>;</span><br><span class="line">		System.out.println(<span class="string">"===========测试查找============"</span>);</span><br><span class="line">		System.out.println(<span class="string">"10000 的位置是"</span> + Arrays.binarySearch(a, <span class="number">10000</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testCopy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Random r = <span class="keyword">new</span> Random();</span><br><span class="line">		<span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			a[i] = r.nextInt();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span>[] b = Arrays.copyOf(a, <span class="number">5</span>);</span><br><span class="line">		System.out.println(<span class="string">"===========测试拷贝前五个元素============"</span>);</span><br><span class="line">		System.out.print(<span class="string">"源数组："</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.print(a[i] + <span class="string">","</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println();</span><br><span class="line">		System.out.print(<span class="string">"目标数组："</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.length;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.print(b[i] + <span class="string">","</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testFill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">		Arrays.fill(a, <span class="number">100</span>);</span><br><span class="line">		Arrays.fill(a, <span class="number">2</span>, <span class="number">8</span>, <span class="number">200</span>);</span><br><span class="line">		System.out.println(<span class="string">"===========测试批量赋值============"</span>);</span><br><span class="line">		System.out.print(<span class="string">"数组赋值后："</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.print(a[i] + <span class="string">","</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testEquality</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">		Arrays.fill(a, <span class="number">100</span>);</span><br><span class="line">		<span class="keyword">int</span>[] b = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">		Arrays.fill(b, <span class="number">100</span>);		</span><br><span class="line">		System.out.println(Arrays.equals(a, b));</span><br><span class="line">		b[<span class="number">9</span>] = <span class="number">200</span>;</span><br><span class="line">		System.out.println(Arrays.equals(a, b));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Collections类</strong>：处理对象是Collection以及其子类</p>
<p>–<strong>排序：对List进行排序，sort。</strong> </p>
<p>–<strong>搜索：从List中搜索元素，binarySearch</strong></p>
<p>–<strong>批量赋值：对List批量赋值，fill。</strong> </p>
<p>–<strong>最大、最小：查找集合中最大/小值，max，min</strong></p>
<p>–<strong>反序：将List 反序排列，reverse</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">12</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        list.add(<span class="number">19</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        <span class="comment">// 检索</span></span><br><span class="line">        System.out.println(<span class="string">"元素所在的索引值是："</span> + Collections.binarySearch(list, <span class="number">12</span>));</span><br><span class="line">        <span class="comment">//最大最小</span></span><br><span class="line">        System.out.println(<span class="string">"最大值："</span> + Collections.max(list));</span><br><span class="line">        System.out.println(<span class="string">"最小值："</span> + Collections.min(list));</span><br><span class="line">        Collections.reverse(list); <span class="comment">//翻转不需要用到排序</span></span><br><span class="line">         </span><br><span class="line">        Collections.fill(list, <span class="number">100</span>); <span class="comment">//全部赋值为100</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>对象比较</strong></p>
<p>• <strong>对象实现Comparable接口</strong>（需要修改对象类）</p>
<p>​    –<strong>compareTo方法</strong></p>
<p>​        • &gt; 返回1， ==返回0，&lt;返回-1 </p>
<p>​    –Arrays和Collections在进行对象sort时，自动调用该方法</p>
<p>• <strong>新建Comparator</strong>（适用于对象类不可更改的情况）</p>
<p>​    –<strong>compare方法</strong></p>
<p>​        • &gt; 返回1， ==返回0，&lt;返回-1 </p>
<p>​    –Comparator比较器将作为参数提交给工具类的sort方法</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java基础学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习笔记</title>
    <url>/2020/08/14/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="MySQL基本命令行"><a href="#MySQL基本命令行" class="headerlink" title="MySQL基本命令行"></a>MySQL基本命令行</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--启动MySQL：</span></span><br><span class="line">mysql -u root -p </span><br><span class="line"><span class="comment">--查看所有数据库：</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>; </span><br><span class="line"><span class="comment">--切换数据库 use 数据库名：</span></span><br><span class="line"><span class="keyword">use</span> xxx;</span><br><span class="line"><span class="comment">--查看数据库中所有的表：</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line"><span class="comment">--显示数据库中所有的表信息：desc 表名</span></span><br><span class="line">desc xxx;</span><br></pre></td></tr></table></figure>

<h2 id="数据库基本知识"><a href="#数据库基本知识" class="headerlink" title="数据库基本知识"></a>数据库基本知识</h2><h3 id="1-数据库基本操作"><a href="#1-数据库基本操作" class="headerlink" title="1.数据库基本操作"></a>1.数据库基本操作</h3><p>操作数据库&gt;操作数据库中的表&gt;操作数据库表中的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--创建数据库</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> xxx</span><br><span class="line"><span class="comment">--删除数据库</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> westos</span><br></pre></td></tr></table></figure>

<h3 id="2-数据库基本数据类型"><a href="#2-数据库基本数据类型" class="headerlink" title="2.数据库基本数据类型"></a>2.数据库基本数据类型</h3><ul>
<li><p>==数值：==</p>
<p>整数类型：int,tinyint,smallint,mediumint,bigint</p>
<p>浮点数类型：float,double</p>
<p><strong>字符串类型的浮点数：decimal</strong></p>
</li>
<li><p>==字符串：==</p>
<p>char：     长度固定的字符串 0-255</p>
<p><strong>varchar：可变长度字符串：0-65535</strong></p>
<p>tinytext：微型文本：2^8^-1</p>
<p><strong>text：      文本串：2^16^-1</strong></p>
</li>
<li><p>==时间日期：==</p>
<p>data：MM-YY-DD 日期格式</p>
<p>time：HH-MM-SS 时间格式</p>
<p><strong>datatime：MM-YY-DD HH-MM-SS</strong> </p>
<p>timestamp：时间戳：1970-01-01到至今的毫秒数</p>
<p>year：年份</p>
</li>
<li><p>==空值：==null 不用来进行数据计算</p>
</li>
</ul>
<h3 id="3-数据库的字段属性"><a href="#3-数据库的字段属性" class="headerlink" title="3.数据库的字段属性"></a>3.数据库的字段属性</h3><ul>
<li><p>==Unsigned：==</p>
<p>无符号整数，表示该列不可以声明为负数。</p>
</li>
<li><p>==zerofill：==</p>
<p>0填充，表示不足设定位数则前导0填充。</p>
</li>
<li><p>==自增：==</p>
<p>自动在上一条记录默认+1（可以自定义），通常用来设置唯一的主键，且必须是整数类型。</p>
</li>
<li><p>==非空：==</p>
<p>Not Null，需要有默认值，否则报错。如果不设定非空属性，则默认值为null。</p>
</li>
</ul>
<h3 id="4-代码创建数据库表"><a href="#4-代码创建数据库表" class="headerlink" title="4.代码创建数据库表"></a>4.代码创建数据库表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 基本格式：</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] <span class="string">`表名`</span> (</span><br><span class="line">  <span class="string">`字段名`</span> 列类型[属性][索引][注释],</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">`字段名`</span> 列类型[属性][索引][注释]   </span><br><span class="line">) [表类型][字符集设定][注释];</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 模版示例：</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`school`</span>  (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'学号'</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'匿名'</span>,</span><br><span class="line">  <span class="string">`pwd`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'123456'</span>,</span><br><span class="line">  <span class="string">`sex`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'男'</span>,</span><br><span class="line">  <span class="string">`birthday`</span> datetime(<span class="number">0</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> AUTO_INCREMENT = <span class="number">1</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8mb4 <span class="keyword">COLLATE</span> = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>操作系统</title>
    <url>/2020/09/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><h2 id="第一章：操作系统引论"><a href="#第一章：操作系统引论" class="headerlink" title="第一章：操作系统引论"></a>第一章：操作系统引论</h2><h3 id="1-操作系统的发展与分类"><a href="#1-操作系统的发展与分类" class="headerlink" title="1.操作系统的发展与分类"></a>1.操作系统的发展与分类</h3><h4 id="手工操作阶段"><a href="#手工操作阶段" class="headerlink" title="手工操作阶段"></a>手工操作阶段</h4><h4 id="批处理操作系统"><a href="#批处理操作系统" class="headerlink" title="批处理操作系统"></a>批处理操作系统</h4><p>设置完成作业（作业=程序+数据+作业说明书）自动转换工作的程序</p>
<ul>
<li><p>单道批处理系统</p>
<p>用户作业——&gt;系统管理员—==脱机输入==—&gt;磁盘（通过监督程序）</p>
<p>特点：单道性，顺序性，自动性</p>
<p>问题：</p>
<ul>
<li>CPU和I/O设备串行工作</li>
</ul>
</li>
<li><p>多道批处理系统</p>
<p>内存中同时驻留多个独立程序，共享资源穿插进行</p>
<p>特点：多道性，无序性，调度性；宏观并行、微观串行</p>
<p>优点：提高CPU利用率（CPU切换频率低）；提高内存和I/O设备利用率；增加系统吞吐量</p>
<p>缺点：</p>
<ul>
<li>平均周转时间长（周转时间：从作业装入系统开始，到运行完成并退出系统为止）</li>
<li>无交互能力</li>
</ul>
</li>
</ul>
<h4 id="分时操作系统"><a href="#分时操作系统" class="headerlink" title="分时操作系统"></a>分时操作系统</h4><p>时间片：每个终端用户的作业能连续使用CPU的最长时间</p>
<p>关键问题：人机交互</p>
<p>特点：==多路性==，独立性，及时性，交互性</p>
<h4 id="实时操作系统"><a href="#实时操作系统" class="headerlink" title="实时操作系统"></a>实时操作系统</h4><p>关键词：截止时间</p>
<ul>
<li><p>开始截止时间</p>
<p>必须在某个时间点开始，否则任务无法按时完成，即任务开始时间不得晚于开始截止时间。</p>
</li>
<li><p>完成截止时间</p>
<p>必须在某个时间点完成，否则任务无法按时结束，即任务结束时间不得晚于完成截止时间。</p>
</li>
</ul>
<p>与分时系统的比较：</p>
<ul>
<li>设计目的不同</li>
<li>特点：及时性，交互性，可靠性</li>
</ul>
<h3 id="2-操作系统的特征和功能"><a href="#2-操作系统的特征和功能" class="headerlink" title="2.操作系统的特征和功能"></a>2.操作系统的特征和功能</h3><h4 id="操作系统的特征"><a href="#操作系统的特征" class="headerlink" title="操作系统的特征"></a>操作系统的特征</h4><ol>
<li><p>并发</p>
<p>定义：两个或多个事件在同一时间间隔内同时发生。</p>
<p><strong>并行与并发的区别：</strong></p>
<p>–并行性：两个或多个事件在同一时刻同时发生。</p>
<p>–并发性：宏观上在同一时间段内同时运行，微观上交替执行。并发特征是OS最重要的特征。</p>
<p>**注：并发是宏观上同时发生，微观上串行；并行指的是微观上同时发生。</p>
</li>
<li><p>共享</p>
<p>定义：指系统中的资源可供内存中多个并发执行的进程共同使用。</p>
<ul>
<li>互斥共享方式：</li>
</ul>
<p>–在一段时间内只允许一个进程访问资源</p>
<p>–临界资源（独占资源）：在一段时间内只允许一个进程访问的资源</p>
<ul>
<li>同时访问方式：</li>
</ul>
<p>–宏观上在一段时间内允许多个进程“同时”访问某些资源</p>
<p>–微观上“轮流”（交替访问）</p>
<p>–处理机、内存、磁盘、可重入代码</p>
</li>
<li><p>虚拟</p>
<p>定义：是指通过某种技术把一个物理实体变为若干个逻辑上的对应物。</p>
<p>![image-20200918111531793](/Users/paragon/Library/Application Support/typora-user-images/image-20200918111531793.png)</p>
</li>
<li><p>异步（不确定性）</p>
<p>–进程是以人们不可预知的速度向前推进的。</p>
<p>–导致的原因：竞争资源。</p>
</li>
</ol>
<h4 id="操作系统的功能"><a href="#操作系统的功能" class="headerlink" title="操作系统的功能"></a>操作系统的功能</h4><h3 id="第一章练习题："><a href="#第一章练习题：" class="headerlink" title="第一章练习题："></a>第一章练习题：</h3><ol>
<li>操作系统有多种类型，允许多个用户以交互的方式使用计算机的操作系统，称为(分时操作系统)；允许多个用户将若干个作业提交给计算机系统集中处理的操作系统，称为(多道批处理系统)；在(实时操作系统 )的控制下，计算机系统能及时处理由过程控制反馈的数据，并及时作出响应。</li>
<li>实时系统对可靠性和安全性要求极高，它（不强求系统资源利用率）。</li>
<li>批处理系统中，作业成批存入（外存），等待作业调度。</li>
<li>在多道程序设计技术的计算机系统中，CPU（可以被多个进程交替占用）。</li>
<li>中断向量是指（中断处理程序的入口地址），由处理机自动寻址。中断向量地址实质就是中断处理程序的入口地址的地址，也就是中断服务例行程序入口地址的地址。</li>
<li>当计算机区分了核心态和用户态指令之后，从核心态到用户态的转换是由操作系统程序执行后完成的，而用户态到核心态的转换则是由(硬件)完成的。</li>
<li>从用户的观点看，操作系统是（使用计算机硬件系统的接口）。</li>
<li>操作系统最主要的设计目标是（方便性和有效性）。</li>
<li>多道批处理系统的硬件支持来自20世纪60年代初发展起来的（中断与通道技术）。</li>
<li>在单处理器系统中实现并发技术后(各进程在一个时间段内并行运行，CPU与外设间并行工作 )。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>字节跳动2020-ByteCamp暑期夏令营研发组习题</title>
    <url>/2020/08/01/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A82020%E6%9A%91%E6%9C%9F%E5%A4%8F%E4%BB%A4%E8%90%A5%E4%B9%A0%E9%A2%98%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>本文主要是记录字节2020夏令营的笔试习题，解答部分待日后不断完善。<br>选择题部分记录不是很完全，剩下没有被收录的大都偏容易。</p>
<a id="more"></a>
<h2 id="单项选择题"><a href="#单项选择题" class="headerlink" title="单项选择题"></a>单项选择题</h2><ol>
<li>箱子里有20个红球，18个白球，逐一随机抽取球，问整个过程中箱外白球至少有一次和箱外红球相等的概率。</li>
<li>求f(x)=x-sinx的零点个数</li>
</ol>
<h2 id="多项选择题"><a href="#多项选择题" class="headerlink" title="多项选择题"></a>多项选择题</h2><ol>
<li>假设在单核无超线程CPU场景下执行如下代码「x=x+1,y=y+x」，有三个线程分别执行这段代码，在所有线程开始前，假设有2个变量x,y，x和y都被初始化为1，x和y值会且只会被这三个线程修改，线程随时会被抢占，设该代码均为原子的，则可能得到的结果？</li>
</ol>
<h2 id="填空题"><a href="#填空题" class="headerlink" title="填空题"></a>填空题</h2><ol>
<li>有一台机器，可批量输入单词，会返回其翻译值，但是不知道对应关系，现有1000个单词，问最少需要（）次才可以确定它们的翻译。</li>
<li>幼儿园阿姨买了很多糖果，让6位小朋友早上自己分糖果，第一个先分成相等6堆，结果发现多出来1颗，于是他吃了一颗然后拿走一堆，剩下五堆；第二个小朋友把五堆合在一起，又分了6堆，结果发现又多了一个，于是他也吃了一颗拿走一堆，剩下的亦如此。问阿姨至少买了多少颗糖。</li>
</ol>
<h2 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h2><ol>
<li><p><strong>题目描述：</strong></p>
<p>小包有一个纪念日，他特别喜欢这个日子，于是把它以”DD-MM-YYYY” (如:31-01-2020，代表2020年1月31日) 的格式记录了下来。但小包不想被别人知道这个日子，于是他将这个日子与很多别的日子写在一起，且该日子的出现次数最多。<br>小包不小心忘记了纪念日到底是哪天，所以小包现在需要从之前的记录中找到这个纪念日。</p>
<p><strong>输入描述：</strong></p>
<p>一行一个字符串，其中只包含数字和字符”-“，字符串长度不超过10^5。<br>2001 &lt;= YYYY &lt;= 2020<br>01&lt;=MM&lt;=12<br>DD满足每个月份的日期数，需要考虑闰年的2月<br>MM和DD不够两位数时会填充前导0，如2020年1月1日会写成01-01-2020而不是1-1-2020。<br>输入保证一定存在一个符合要求的合法的日期，且保证一定存在一个日期出现次数严格大于别的日期出现次数。</p>
<p><strong>输出描述：</strong></p>
<p>纪念日日期，以DD- MM-YYYY”的格式。</p>
<p><strong>示例1:</strong></p>
<p>输入：20-12-2030-12-2020</p>
<p>输出：30-12-2020</p>
<p>说明：符合条件的日期只有30-12-2020这一个。注意数据中的20-12-2030年份超出了2001 &lt;= YYYY &lt;= 2020范围，因此不计算在内。</p>
</li>
<li><p><strong>题目描述：</strong></p>
<p>字节跳动有很多个机房，每个机房可能会有很多个网段(如 10.1.2.0/24)，网段之间会有包含关系，当出现包含关系时，以小的网段为准。如机房1对应网段10.1.0.0/16，机房2对应网段10.1.2.0/24，那么现在有一个IP 10.1.2.3，其应当归属于机房2。</p>
<p>公司内我们经常会遇到一个场景:要查询一个IP所在的机房。请你写一个程序，根据输入的网段信息和所需查询的IP给出所在的机房。为了简化问题，在这里我们认为所有IP都是可分配的，即不考虑网段地址和广播地址，将这两种地址也认为是可分配地址。</p>
<p><strong>输入描述：</strong></p>
<p>第一行包含两个整数n和m。随后n行，每行有两部分组成，第一部分是机房编号，第二部分是网段信息，格式如下:<br>idc net<br>随后m行，每行是一个IP，表示需要查询的IP。<br>保证所有的网段以及IP都为IPV4格式，不存在IPV6 的输入数据。<br>要注意，输入可能存在一个大网段被多个小网段切分完毕的情况。</p>
<p>数据范围:<br>对于30%的数据:1&lt;=n&lt;=10、1&lt;=m&lt;=100;<br>对于60%的数据，1&lt;=n&lt;=1000、1&lt;=m&lt;=5000;<br>对于100%的数据，1&lt;=n&lt;=5000、1&lt;=m&lt;=50000。</p>
<p><strong>输出描述：</strong></p>
<p>输出一共有m行，每行为一个整数，代表第Mi行IP对应的机房编号。<br>如果所输入的IP没有找到对应的网段信息，就输出-1。</p>
<p><strong>示例1:</strong></p>
<p> 输入：</p>
   <figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span>	<span class="number">4</span>   </span><br><span class="line"><span class="symbol">1 </span><span class="number">10.1.2.0</span>/<span class="number">24</span>  </span><br><span class="line"><span class="symbol">2 </span><span class="number">10.1.0.0</span>/<span class="number">16</span>   </span><br><span class="line"><span class="symbol">1 </span><span class="number">10.1.5.0</span>/<span class="number">24</span>   </span><br><span class="line"><span class="symbol">2 </span><span class="number">10.1.2.128</span>/<span class="number">125</span>  </span><br><span class="line"><span class="number">10.1.2.3</span> </span><br><span class="line"><span class="number">10.1.2.129</span></span><br><span class="line"><span class="number">10.3.2.1</span></span><br><span class="line"><span class="number">10.1.5.2</span></span><br></pre></td></tr></table></figure>

<p>  输出：</p>
   <figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">-1</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>题目描述：</strong></p>
<p>两姐妹小蔓和小玉玩抽牌游戏:一共n张牌，两人轮流抽排，先手者的第一次抽可以抽任意张但不可抽完，以后每次抽都只能抽取不超过上一次抽牌数的两倍(不可不抽)。谁先抽完牌谁赢(没得抽的算输)。由姐姐小蔓先抽。假设该游戏会进行t轮，每轮重新给出新的n。请问先手的姐姐小蔓一共能赢其中的多少轮呢?(注:两姐妹冰雪聪明，都会做出对自己最优的策略)</p>
<p><strong>输入描述：</strong></p>
<p>第一行，一个数字t<br>接下来t行，每行一个数字，n</p>
<p><strong>输出描述：</strong></p>
<p>一个数字x，代表姐姐小蔓赢得轮数</p>
<p><strong>示例1:</strong></p>
<p>输入：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">​<span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>输出：1</p>
<p>说明： </p>
<p>2&lt;=n&lt;=1e9</p>
<p>30%的数据(1&lt;=t&lt;=10^3)</p>
<p>60%的数据(1&lt;=t&lt;=10^5)</p>
<p>100%的数据(1&lt;=t&lt;=10^6)</p>
</li>
<li><p><strong>题目描述：</strong></p>
<p>我们在使用Tensorflow等编写神经网络时，为了使代码逻辑清晰，可能会造成运行时的低效。小熊写出了如下的计算式:</p>
<blockquote>
<p>(p0-(p1 /(p0 + (p3-p4))))+ (p2*(p1 /(p0 + (p3- p4))</p>
</blockquote>
<p>在Tensorflow中可以表示为如下图一，其中p1/ (p0 + (p3 - p4))计算了两次。还好Tensorlfow提供的XL A(Accelerated Linear Algebra)对此进行了优化，只需计算一次，计算流程被优化为如下图二形式。</p>
<p><img src="https://s1.ax1x.com/2020/08/01/a3Nlw9.png" alt="a3Nlw9.png"></p>
<p>小熊露出了满意的笑容的同时，开始思考这个过程是怎么完成的。他已经把这个问题简化，他使用前缀表示法来表示这些计算式，并限定操作符于{+,-, *,/}，操作数为单个小写字母。可描述如下:</p>
<blockquote>
<p>E in{a, b,…Z}<br>f in{t,-,*k,/}<br>F= f(E, E)<br>F= f(E, F)</p>
</blockquote>
<p>令上述表达式中p0=a, p1=b, p2=c, p3=d, p4=e，前缀表示法可表示为:</p>
<blockquote>
<p>+(-(a,/(b,+(a,-(d,e)))),*(c,/(b,+(a,-(d,e)))))</p>
</blockquote>
<p>他希望能将这个表达式的计算节点优化到最少，能不能帮他写个程序来完成这个任务?<br>对于每个表达式，将其计算节点优化到最少。并将优化的子表达式以一个数字表示，这个数字指向等于此子表达式的根节点的序号。节点的序号从1开始，按前序遍历分配，如果是重复节点则不分配编号。如”a+a”可转换为前缀表达式”+(a,a)”，第二个”a”发现第一个”a”作为节点(编号2)已经出现过，因此可优化为”+(a,2)”，2表示指向编号为2的节点。</p>
<p>而在”+(-(a,/(b,+(a,-(d,e)))),(c,/(b,+(a,-(d,e)))))”中，”a”和”/(b,+(a,-(d,e)))”都是重复的， 其中a第一次出现的节点编号为3,”/(b,+(a,-(d,e)))”第一 次出现的根节点”/“编号为4，因此可以优化为”+(-(a,/(b,+(3,-(d,f)))),*(c,4))”。</p>
<p><strong>输入描述：</strong></p>
<p>第一行包含一个数字c，表示将要处理的表达式行数，不超过200行。接下来的c行每行包含一个表达式，表达式的形式由上述给出(已转换为前缀形式，无空格，有括号)。最多包含10000个节点。</p>
<p><strong>输出描述：</strong></p>
<p>对于每个表达式，输出按说明中优化后的表达式。</p>
<p><strong>示例1:</strong></p>
<p><img src="https://s1.ax1x.com/2020/08/01/a3N1oR.png" alt="a3N1oR.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>面向求职汇总</category>
      </categories>
      <tags>
        <tag>笔试习题</tag>
      </tags>
  </entry>
</search>
