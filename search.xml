<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java源码阅读</title>
    <url>/2020/07/18/Java%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</url>
    <content><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>本文主要是总结如何配置Java源码的阅读环境，可以方便我们更深入的了解Java JDK的相关底层实现逻辑，许多诸如HashMap实现逻辑均可通过本方法调试查阅底层交互。</p>
<a id="more"></a>
<p>看完本篇可以收获：</p>
<ul>
<li>Java源码阅读技巧</li>
<li>HashMap基本逻辑</li>
<li>IDEA调试技巧</li>
</ul>
<h2 id="Java源码环境搭建"><a href="#Java源码环境搭建" class="headerlink" title="Java源码环境搭建"></a>Java源码环境搭建</h2><h3 id="1-获取Java源码"><a href="#1-获取Java源码" class="headerlink" title="1.获取Java源码"></a>1.获取Java源码</h3><p>由于新版Java14的源码不好直接获取，我们就选择最常用的Java1.8的源码，通过官网下载Java1.8即可获得对应相关资源，具体实现步骤如下：</p>
<ol>
<li><p>通过Java 1.8构建新的Java项目</p>
<p><img src="https://s1.ax1x.com/2020/07/18/U29utS.png" alt="U29utS.png"></p>
<p>在新建项目中创建两个项目文件夹source和test，其中source用来存放Java的源码，test用来存放需要阅读的源码，笔者这里选择hashmap作为演示。</p>
</li>
<li><p>配置source环境</p>
<p>在source文件中添加我们下载好的Java 1.8的源码，首先选择IDEA左上角Project Structure(Mac英文状态下快捷键⌘;)，然后选择SDKs便可获取到对应的源码路径。</p>
<p><img src="https://s1.ax1x.com/2020/07/18/U2916s.png" alt="U2916s.png"><br>打开对应路径文件找到src.zip文件解压便可得Java 1.8对应的源码，之后将解压后的文件复制粘贴至我们的项目source路径下：(source源码对应文件下的资源可能略有不同，视个人的JDK版本)</p>
<p><img src="https://s1.ax1x.com/2020/07/18/U29Kfg.png" alt="U29Kfg.png"></p>
</li>
<li><p>创建测试代码</p>
<p><img src="https://s1.ax1x.com/2020/07/18/U29QpQ.png" alt="U29QpQ.png"></p>
<p>在test.hashmap中创建Test类，然后键入如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaDoc.test.hashmap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Double&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        hashMap.put(<span class="string">"k1"</span>,<span class="number">0.1</span>);</span><br><span class="line">        hashMap.put(<span class="string">"k2"</span>,<span class="number">0.2</span>);</span><br><span class="line">        hashMap.put(<span class="string">"k3"</span>,<span class="number">0.3</span>);</span><br><span class="line">        hashMap.put(<span class="string">"k4"</span>,<span class="number">0.4</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在Map所在行处添加断点调试，这样我们基本的HashMap的源码阅读环境就搭建完成了。</p>
</li>
</ol>
<h3 id="2-IDEA环境配置调整"><a href="#2-IDEA环境配置调整" class="headerlink" title="2.IDEA环境配置调整"></a>2.IDEA环境配置调整</h3><ol>
<li><p>修改heap size</p>
<p>为了保证hashmap基本运行稳定，我们先调整一下heap size，打开Preference——Build,Execution——Compiler，找到Build process heap size选项，调整大小：</p>
<p><img src="https://s1.ax1x.com/2020/07/18/U29nk8.png" alt="U29nk8.png"></p>
</li>
<li><p>解除源码查阅编辑限制</p>
<p>由于Java JDK的源码是受保护的，我们进行调试后无法直接进入源码内部去查看实现逻辑，这时候我们就需要更改Preference——Build,Execution——Stepping，找到Do not step into the classes  选项，去除前面的勾选，这时候我们便可以调试进入源码内部了：</p>
<p><img src="https://s1.ax1x.com/2020/07/18/U293Xn.png" alt="U293Xn.png"></p>
<p>接下来我们需要解除源码的编辑限制，这样我们在调试查看源码的过程中就可以添加一部分自己的注释了，首先打开IDEA左上角Project Structure选择SDKs——Sourcepath,选中下图所示文件后，<br>选择最下角➖符号移除，然后添加我们自己目录JavaDoc/src/JavaDoc/source（路径即为自己所对应项目下的source文件）</p>
<p><img src="https://s1.ax1x.com/2020/07/18/U29Gmq.png" alt="U29Gmq.png"></p>
<p><img src="https://s1.ax1x.com/2020/07/18/U29Y7V.png" alt="U29Y7V.png"></p>
<p>这样我们整体的Java源码的阅读环境就搭建起来了，不仅可以查看JDK源码，甚至可以在源码部分添加自己的理解。</p>
</li>
</ol>
<h2 id="HashMap基本调试"><a href="#HashMap基本调试" class="headerlink" title="HashMap基本调试"></a>HashMap基本调试</h2><h3 id="1-启动断点调试"><a href="#1-启动断点调试" class="headerlink" title="1.启动断点调试"></a>1.启动断点调试</h3><p>选择IDEA右上角对应的debug，静等程序debug完成。</p>
<h3 id="2-观察调试过程"><a href="#2-观察调试过程" class="headerlink" title="2.观察调试过程"></a>2.观察调试过程</h3><p>   <img src="https://s1.ax1x.com/2020/07/18/U29J00.png" alt="U29J00.png"></p>
<p>   <img src="https://s1.ax1x.com/2020/07/18/U29NkT.png" alt="U29NkT.png"><br>调试过程只是简单的HashMap的流程记录，原理部分参看网上诸多关于HashMap的讲解。</p>
<h3 id="3-常用的Java源码学习"><a href="#3-常用的Java源码学习" class="headerlink" title="3.常用的Java源码学习"></a>3.常用的Java源码学习</h3><p>在source中包含了所有的Java  JDK1.8的源码，其中主要实现集中于source——Java下：</p>
<p>   <img src="https://s1.ax1x.com/2020/07/18/U29UtU.png" alt="U29UtU.png"></p>
<p>其中各个组件的大致功能如下：</p>
<table>
<thead>
<tr>
<th>常用组件</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Java.io</td>
<td>基本阻塞式io控制模型，eg:File,Console…</td>
</tr>
<tr>
<td>Java.lang</td>
<td>基础数据包装类型，eg:annotation,reflect…</td>
</tr>
<tr>
<td>Java.math</td>
<td>特殊数据处理类型，eg:BigInteger…</td>
</tr>
<tr>
<td>Java.net</td>
<td>网络通信模型，eg:Socket…</td>
</tr>
<tr>
<td>Java.nio</td>
<td>非阻塞式io控制模型，eg:Buffer…</td>
</tr>
<tr>
<td>Java.time</td>
<td>JDK1.8新增，时间模型</td>
</tr>
<tr>
<td>Java.util</td>
<td>基本工具，eg:J.U.C(concurrent),hashmap…</td>
</tr>
</tbody></table>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文主要是对Java源码部分通过IDEA进行调试分析，在调试过程中可以记录JDK底层源码的实现逻辑，加深自己对JDK源码的理解。</p>
<p>可能遇到的问题：</p>
<ul>
<li><p>程序调试窗口无法正常调试：</p>
<p>看看是不是IDEA右上角Edit Configurations选错成main class，需要更改成Test所在类。</p>
</li>
<li><p>Test中HashMap调试一直卡在writing classes：</p>
<p>打开设置File——Preference(Windows下对应Settings)——Build,Execution——Compiler：调整heap size大小至合适范围，一般1800Mbytes足矣。</p>
</li>
<li><p>上述bug均未出现，但仍然无法调试阅读源码：</p>
<p>可能是项目下source对应的文件不规范，建议从官网上下载对应的Java JDk，然后在安装目录中找到src.zip文件解压后将其重新导入到source目录下。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java源码学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础语法学习笔记</title>
    <url>/2020/07/28/Java%E5%9F%BA%E7%A1%80%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>本文主要是总结一些Java的基础知识，主要是用来记录自己的学习过程与学习心得。</p>
<a id="more"></a>
<h2 id="第一章：基础语法整理"><a href="#第一章：基础语法整理" class="headerlink" title="第一章：基础语法整理"></a>第一章：基础语法整理</h2><h3 id="String拼接"><a href="#String拼接" class="headerlink" title="String拼接"></a>String拼接</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> ... </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>,b=<span class="number">20</span>;</span><br><span class="line"><span class="comment">//以下两条代码输出结果均为String类型</span></span><br><span class="line">System.out.println(<span class="string">""</span>+a+b);</span><br><span class="line"><span class="comment">//输出1020</span></span><br><span class="line">System.out.println(a+b+<span class="string">""</span>);</span><br><span class="line"><span class="comment">//输出30</span></span><br></pre></td></tr></table></figure>

<h3 id="Scanner用法"><a href="#Scanner用法" class="headerlink" title="Scanner用法"></a>Scanner用法</h3><ol>
<li><p>获取系统输入流：new scanner(System.in)</p>
</li>
<li><p>判断输入截止：hasNext()/hasNextLine</p>
</li>
<li><p>获取用户输入信息：scanner.next()/scanner.nextLine()</p>
</li>
<li><p>关闭scanner方法：scanner.close()</p>
<p>完整代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputScnner</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"please input a string:"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Java-Scnner输入流</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">				<span class="comment">/*</span></span><br><span class="line"><span class="comment">				next方法：</span></span><br><span class="line"><span class="comment">				1.只有在遇到有效字符才正式生效，即开始输入的若干空格字符不被正常识别记录</span></span><br><span class="line"><span class="comment">				2.有效字符之后遇到空格的元素被剔除</span></span><br><span class="line"><span class="comment">				3.以Enter作为截止输入符</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//next() </span></span><br><span class="line">        <span class="keyword">if</span>(scanner.hasNext())&#123;</span><br><span class="line">            String str = scanner.next();</span><br><span class="line">            System.out.println(<span class="string">"output is "</span>+str);</span><br><span class="line">        &#125;</span><br><span class="line">				<span class="comment">/*</span></span><br><span class="line"><span class="comment">				nextLine方法：</span></span><br><span class="line"><span class="comment">				1.以Enter作为截止输入符</span></span><br><span class="line"><span class="comment">				2.即Enter之前的所有的符号均可被正常识别记录</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//nextLine() </span></span><br><span class="line">        <span class="keyword">if</span>(scanner.hasNextLine())&#123;</span><br><span class="line">            String str = scanner.nextLine();</span><br><span class="line">            System.out.println(<span class="string">"output is "</span>+str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//close scnner</span></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="switch-case穿透"><a href="#switch-case穿透" class="headerlink" title="switch case穿透"></a>switch case穿透</h3><p>switch-case匹配结构中，若case分支不存在break语句且当前条件匹配该case，则直接执行此case及之后所有case分支语句，直到遇到下一个break停止执行,代码示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 如果当前I1值为B，则匹配第二个case语句，程序整体输出B所在case语句之后所有sout语句，</span></span><br><span class="line"><span class="comment"> 直至遇到break为止，若D所在case语句也不存在break，则default语句依旧被输出。</span></span><br><span class="line"><span class="comment"> 输出结果为：</span></span><br><span class="line"><span class="comment"> Nice!</span></span><br><span class="line"><span class="comment"> ohyeah!</span></span><br><span class="line"><span class="comment"> shit!</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">switch</span> (I1)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"A"</span>:</span><br><span class="line">                System.out.println(<span class="string">"Good!"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"B"</span>:</span><br><span class="line">                System.out.println(<span class="string">"Nice!"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"C"</span>:</span><br><span class="line">                System.out.println(<span class="string">"ohyeah!"</span>);</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">case</span> <span class="string">"D"</span>:</span><br><span class="line">                System.out.println(<span class="string">"shit!"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">"Wrong!"</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h3 id="值传递和引用传递"><a href="#值传递和引用传递" class="headerlink" title="值传递和引用传递"></a>值传递和引用传递</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        System.out.println(a);<span class="comment">//输出 a = 1</span></span><br><span class="line">        Test.change(a);</span><br><span class="line">        System.out.println(a);<span class="comment">//输出 a = 1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        a = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//引用传递</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.name = <span class="string">"lisi"</span>;</span><br><span class="line">        System.out.println(person.name);<span class="comment">//输出 lisi</span></span><br><span class="line">        Test.change(person);</span><br><span class="line">        System.out.println(person.name);<span class="comment">//输出 zhangsan</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">        person.name = <span class="string">"zhangsan"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><ol>
<li>JDK 1.5新增功能</li>
<li>在方法声明中，在指定参数类型后添加省略号(…)</li>
<li>一个方法中只能声明一个可变参数，<font color ="ff0000">它必须是方法的最后一个参数</font>，任何其他普通参数均需在其之前声明。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exchange</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        printMaxmum(<span class="number">1.2</span>,<span class="number">323</span>,<span class="number">12</span>,<span class="number">44</span>,<span class="number">4.5</span>);</span><br><span class="line">        printMaxmum(<span class="keyword">new</span> <span class="keyword">double</span>[]&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">7.7</span>,<span class="number">6</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  	<span class="comment">//可变参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMaxmum</span><span class="params">(<span class="keyword">double</span>... number)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(number.length==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"no number"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> max = number[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; number.length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (number[i]&gt;max)</span><br><span class="line">                max=number[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"the max value is :"</span>+max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arrays_one = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[][] arrays_two = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//JDK1.5新增功能</span></span><br><span class="line"><span class="comment">//一维数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> array:arrays_one)</span><br><span class="line">&#123;</span><br><span class="line">  System.out.println(array);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//二维数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span>[] ints:arrays_two)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> anInt:ints)</span><br><span class="line">    System.out.println(anInt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//二维数组创建</span></span><br><span class="line">        System.out.println(<span class="string">"please input matrix's nums,lins and cows:"</span>);</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> sum = scanner.nextInt();<span class="comment">//有效值总数</span></span><br><span class="line">        <span class="keyword">int</span> lin = scanner.nextInt();<span class="comment">//行数</span></span><br><span class="line">        <span class="keyword">int</span> cow = scanner.nextInt();<span class="comment">//列数</span></span><br><span class="line">				<span class="comment">//初始化二维数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] arrays_two = <span class="keyword">new</span> <span class="keyword">int</span>[lin][cow];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sum; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"please input the value and its position: "</span>);</span><br><span class="line">            <span class="keyword">int</span> num_v = scanner.nextInt();<span class="comment">//元素值</span></span><br><span class="line">            <span class="keyword">int</span> lin_l = scanner.nextInt();<span class="comment">//对应的行数</span></span><br><span class="line">            <span class="keyword">int</span> cow_c = scanner.nextInt();<span class="comment">//对应的列数</span></span><br><span class="line"></span><br><span class="line">            arrays_two[lin_l-<span class="number">1</span>][cow_c-<span class="number">1</span>] = num_v;</span><br><span class="line">        &#125;</span><br><span class="line">				<span class="comment">//输出二维数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : arrays_two) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints) &#123;</span><br><span class="line">                System.out.print(anInt+<span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        初始化稀疏数组，其中行数为有效数字个数+1，列数固定3列</span></span><br><span class="line"><span class="comment">        其中第一行存放稀疏数组的有效值个数，行数，列数</span></span><br><span class="line"><span class="comment">        其余行存放对应的有效值以及其行列数</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">int</span>[][] arrays_xishu = <span class="keyword">new</span> <span class="keyword">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        arrays_xishu[<span class="number">0</span>][<span class="number">0</span>] = sum;</span><br><span class="line">        arrays_xishu[<span class="number">0</span>][<span class="number">1</span>] = arrays_two.length;</span><br><span class="line">        arrays_xishu[<span class="number">0</span>][<span class="number">2</span>] = arrays_two[<span class="number">0</span>].length;</span><br><span class="line">        <span class="comment">//遍历原数组，将有效值存放于稀疏数组中</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrays_two.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arrays_two[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arrays_two[i][j]!=<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    count += <span class="number">1</span>;</span><br><span class="line">                    arrays_xishu[count][<span class="number">0</span>] = arrays_two[i][j];</span><br><span class="line">                    arrays_xishu[count][<span class="number">1</span>] = i+<span class="number">1</span>;</span><br><span class="line">                    arrays_xishu[count][<span class="number">2</span>] = j+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        System.out.println(<span class="string">"稀疏数组如下所示："</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : arrays_xishu) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints) &#123;</span><br><span class="line">                System.out.print(anInt+<span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第二章：面向对象思想"><a href="#第二章：面向对象思想" class="headerlink" title="第二章：面向对象思想"></a>第二章：面向对象思想</h2><h3 id="面向对象和类"><a href="#面向对象和类" class="headerlink" title="面向对象和类"></a>面向对象和类</h3><ul>
<li><p>构造函数</p>
<ul>
<li>必须和类名一样，且没有返回值。</li>
<li><font color ="ff0000">new 本质是在调用构造方法，初始化对象的值。</font></li>
<li>定义有参构造之后，若想使用无参构造，需显示定义一个无参构造。</li>
</ul>
</li>
<li><p>析构函数</p>
<p>Java不存在析构函数,Java具有内存回收机制，当变量退出其生命周期时，JVM会自动识别并调用垃圾回收器GC。</p>
</li>
<li><p>Java类访问权限</p>
<table>
<thead>
<tr>
<th></th>
<th>同一个类</th>
<th>同一个包</th>
<th>不同包的子类</th>
<th>不同包的非子类</th>
</tr>
</thead>
<tbody><tr>
<td>private</td>
<td>✓</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>default</td>
<td>✓</td>
<td>✓</td>
<td></td>
<td></td>
</tr>
<tr>
<td>protected</td>
<td>✓</td>
<td>✓</td>
<td>✓</td>
<td></td>
</tr>
<tr>
<td>public</td>
<td>✓</td>
<td>✓</td>
<td>✓</td>
<td>✓</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p><strong>遵循原则：高内聚，低耦合</strong></p>
<ul>
<li>保护属性信息：类的成员属性是私有的private<ul>
<li>获取类成员属性可以使用getter &amp; setter 方法，对应IDEA工具 mac快捷键：command+return；windows快捷键：alt+inter</li>
</ul>
</li>
<li>公开行为信息：类的方法是公有的public</li>
<li>this关键字<ul>
<li>this负责指向本类中的成员变量</li>
<li>this负责指向本类中的成员方法</li>
<li>this可以代替本类的构造函数</li>
</ul>
</li>
<li>this示例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OO类声明</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OOExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       gets obj = <span class="keyword">new</span> gets(<span class="number">5</span>);  </span><br><span class="line">       System.out.println(obj.sum());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//gets类声明</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">gets</span> </span>&#123;</span><br><span class="line">    <span class="comment">//设定私有变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> m,n;</span><br><span class="line">    <span class="comment">//类的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">gets</span><span class="params">(<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(m,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">gets</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.m=m;</span><br><span class="line">        <span class="keyword">this</span>.n=n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义sum方法调用add方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.add(m,n);<span class="comment">//可省略this因为不会引起歧义</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m+n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul>
<li><p>继承是类与类之间的一种关系，除此之外，类与类之间还可以存在依赖、组合、聚合等关系。</p>
</li>
<li><p>继承关系的两个类，一个为子类（派生类），一个为父类（基类）。子类继承父类，使用关键字<strong>extendes</strong>。</p>
</li>
<li><div><font color = "ff0000">Java中类只有单继承，没有多继承,其中object类是所有类的父类。</font></div>

</li>
</ul>
<p><strong>super关键字</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Person无参构造"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> String name = <span class="string">"zhangsan"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">   	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      	<span class="comment">//！！默认隐藏调用父类的！无参！构造函数！！</span></span><br><span class="line">      	<span class="comment">//如果调用有参构造函数，需显示声明super()方法</span></span><br><span class="line">      	<span class="comment">//super();</span></span><br><span class="line">        System.out.println(<span class="string">"Student无参构造"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">"bushizhangsan"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(name);<span class="comment">//输出当前name</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name);<span class="comment">//输出当前类对应的name</span></span><br><span class="line">        System.out.println(<span class="keyword">super</span>.name);<span class="comment">//输出父类对应的name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.test(<span class="string">"张三"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//程序输出</span></span><br><span class="line">Person无参构造</span><br><span class="line">Student无参构造</span><br><span class="line">张三</span><br><span class="line">bushizhangsan</span><br><span class="line">zhangsan</span><br></pre></td></tr></table></figure>

<p><strong>方法重写</strong></p>
<ol>
<li>方法名必须相同，参数列表必须相同。</li>
<li>修饰符：继承子类属性的范围相较父类属性可以扩大，但不可以缩小：public&gt;protected&gt;default&gt;private</li>
<li>抛出异常范围：可以被缩小，但不可以被扩大：ClassNotFoundException –&gt; Exception(大)</li>
<li>重写前后子类方法名必须和父类一致，但是方法体可以不同。</li>
</ol>
<ul>
<li><p>静态方法重写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Person=&gt;test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Student=&gt;test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.test();</span><br><span class="line">        Person person = <span class="keyword">new</span> Student();<span class="comment">//延伸创建父类对象</span></span><br><span class="line">        person.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">Student=&gt;test</span><br><span class="line">Person=&gt;test</span><br></pre></td></tr></table></figure>
</li>
<li><p>非静态方法重写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Person=&gt;test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  	<span class="meta">@Override</span><span class="comment">//注解：有功能的注释</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Student=&gt;test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.test();</span><br><span class="line">        Person person = <span class="keyword">new</span> Student();<span class="comment">//重写父类方法</span></span><br><span class="line">        person.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">Student=&gt;test</span><br><span class="line">Student=&gt;test</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ul>
<li><p>多态即同一种对象可以根据发送对象的不同而采取多种不同的行为方式，即对函数而言，<font color="ff0000">取决于左部类型信息。</font></p>
</li>
<li><p>多态存在条件：有继承关系、子类重写父类方法、父类引用子类对象。</p>
</li>
<li><p>多态本质是父类引用指向子类的对象，子类转换为父类，向上转型；<font color ="ff0000">父类转换为子类，向下转型，须强制转换。</font></p>
</li>
</ul>
<p><strong>static关键词</strong></p>
<ul>
<li><p>static静态代码块</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  	<span class="comment">//1.随类加载时一同执行，且只执行一次</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  	<span class="comment">//2.完成类的初始操作</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"匿名代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  	<span class="comment">//3.当类的初始操作完成后执行构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        System.out.println(<span class="string">"==============="</span>);</span><br><span class="line">        Person person2 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">静态代码块</span><br><span class="line">匿名代码块</span><br><span class="line">构造方法</span><br><span class="line">===============</span><br><span class="line">匿名代码块</span><br><span class="line">构造方法</span><br></pre></td></tr></table></figure>
</li>
<li><p>static静态导入包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"匿名代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(random());        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">静态代码块</span><br><span class="line"><span class="number">0.9107008895679277</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ul>
<li><p>抽象类不能使用new关键字来创建对象，只能通过子类继承来实现。</p>
</li>
<li><p>抽象方法只有方法的声明，没有方法的实现。</p>
</li>
<li><p><strong>abstract</strong>修饰符可以用来修饰方法也可以用来修饰类，若修饰方法，则该方法是抽象方法；若修饰类，则该类是抽象类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span></span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Action</span></span>&#123;</span><br><span class="line">  	<span class="meta">@Override</span></span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">//方法实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>注：抽象类中也是可以有构造函数的。虽然抽象类不能实例化，但是抽象类被继承之后，它的派生类可以实例化；而派生类在实例化调用构造函数的时候会先调用基类中的构造函数，所以抽象类的构造函数也是可以被调用的，所以抽象类中可以有构造函数。</p>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><table>
<thead>
<tr>
<th>JavaOOD思想</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>普通类</td>
<td>只有具体的实现</td>
</tr>
<tr>
<td>抽象类</td>
<td>具体实现和规范（抽象方法）</td>
</tr>
<tr>
<td>接口</td>
<td>只有规范</td>
</tr>
</tbody></table>
<ul>
<li><p>接口是一种规范，定义了一组规则，体现了现实世界中“如果你是…则必须能…”的思想。</p>
</li>
<li><p><font color="ff0000">接口本质是一种契约</font>，相当于一种Java的法律规范。</p>
</li>
<li><p>声明类的关键字是class，声明接口的关键字是<strong>interface</strong>。</p>
</li>
<li><p>接口中所有的方法均默认<strong>public abstract</strong>,所有常量默认<strong>public static final</strong>。</p>
</li>
<li><p>实现接口方法通过子类<strong>implements</strong>关键词实现，<font color="ff0000">同时子类可以实现多个接口。</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">userService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口实现</span></span><br><span class="line"><span class="keyword">import</span> .../.userService;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> <span class="keyword">implements</span> <span class="title">userService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义内部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> id = <span class="number">10</span> ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"this is Outer"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"this is Inner"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//通过内部类获取外部私有信息</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getID</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用内部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer.Inner inner = <span class="keyword">new</span> Outer.Inner();</span><br><span class="line">        inner.getID();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>

<h2 id="第三章：Java常用类"><a href="#第三章：Java常用类" class="headerlink" title="第三章：Java常用类"></a>第三章：Java常用类</h2><ol>
<li><p>Math–BigDecimal</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(<span class="string">"1234"</span>);</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(<span class="string">"1234"</span>);</span><br><span class="line">        BigDecimal b3 = b1.divide(b2,<span class="number">3</span>,BigDecimal.ROUND_HALF_DOWN);</span><br><span class="line">        System.out.println(b3);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>String</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String a = <span class="string">"123;456;789;123 "</span>;</span><br><span class="line">		System.out.println(a.charAt(<span class="number">0</span>)); <span class="comment">// 返回第0个元素</span></span><br><span class="line">		System.out.println(a.indexOf(<span class="string">";"</span>)); <span class="comment">// 返回第一个;的位置</span></span><br><span class="line">		System.out.println(a.concat(<span class="string">";000"</span>)); <span class="comment">// 连接一个新字符串并返回，a不变</span></span><br><span class="line">		System.out.println(a.contains(<span class="string">"000"</span>)); <span class="comment">// 判断a是否包含000</span></span><br><span class="line">		System.out.println(a.endsWith(<span class="string">"000"</span>)); <span class="comment">// 判断a是否以000结尾</span></span><br><span class="line">		System.out.println(a.equals(<span class="string">"000"</span>)); <span class="comment">// 判断是否等于000</span></span><br><span class="line">		System.out.println(a.equalsIgnoreCase(<span class="string">"000"</span>));<span class="comment">// 判断在忽略大小写情况下是否等于000</span></span><br><span class="line">		System.out.println(a.length()); <span class="comment">// 返回a长度</span></span><br><span class="line">		System.out.println(a.trim()); <span class="comment">// 返回a去除前后空格后的字符串，a不变</span></span><br><span class="line">		String[] b = a.split(<span class="string">";"</span>); <span class="comment">// 将a字符串按照;分割成数组</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.length; i++) &#123;</span><br><span class="line">			System.out.println(b[i]);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">"==================="</span>);</span><br><span class="line"></span><br><span class="line">		System.out.println(a.substring(<span class="number">2</span>, <span class="number">5</span>)); <span class="comment">// 截取a的第2个到第5个字符 a不变</span></span><br><span class="line">		System.out.println(a.replace(<span class="string">"1"</span>, <span class="string">"a"</span>));</span><br><span class="line">		System.out.println(a.replaceAll(<span class="string">"1"</span>, <span class="string">"a"</span>)); <span class="comment">// replaceAll第一个参数是正则表达式</span></span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">"==================="</span>);</span><br><span class="line"></span><br><span class="line">		String s1 = <span class="string">"12345?6789"</span>;</span><br><span class="line">		String s2 = s1.replace(<span class="string">"?"</span>, <span class="string">"a"</span>);</span><br><span class="line">		String s3 = s1.replaceAll(<span class="string">"[?]"</span>, <span class="string">"a"</span>);</span><br><span class="line">		<span class="comment">// 这里的[?] 才表示字符问号，这样才能正常替换。不然在正则中会有特殊的意义就会报异常</span></span><br><span class="line">		System.out.println(s2);</span><br><span class="line">		System.out.println(s3);</span><br><span class="line">		System.out.println(s1.replaceAll(<span class="string">"[\\d]"</span>, <span class="string">"a"</span>)); <span class="comment">//将s1内所有数字替换为a并输出，s1的值未改变。</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Time</p>
</li>
<li><p>Format</p>
</li>
</ol>
<h2 id="第四章：Java异常处理"><a href="#第四章：Java异常处理" class="headerlink" title="第四章：Java异常处理"></a>第四章：Java异常处理</h2><ul>
<li><p>Java异常包含<strong>Throwable、Error和Exception</strong>三类，其中<strong>Throwable</strong>是所有错误的祖先，<strong>Error</strong>是系统内部错误，<strong>Exception</strong>是程序有关的异常。</p>
</li>
<li><p>Java采取<strong>try-catch-finally框架</strong>处理异常结构，其中try负责正常的业务逻辑代码，catch负责捕捉try抛出的异常类型，finally则在try-catch最后执行。<strong><font color ="ff0000">try必须存在，catch和finally至少有一个</font></strong>，且三个模块均可在内部嵌套<strong>try-catch-finally框架</strong>。</p>
</li>
<li><p>catch块可类比case，可以有多个，进入入口取决于try抛出的异常，当抛出异常同某个catch块中的形参类型一致，则执行该catch块代码。<strong><font color ="ff0000">进入catch块后，并不会返回到try发生的位置，也不会执行后续的catch块，一个异常只能进入一个catch块。</font></strong></p>
</li>
<li><p>throws异常处理中，若该方法被覆盖，<strong><font color="ff0000">覆盖它的方法必须抛出相同的异常，或者异常的子类。</font></strong>即父类方法抛出的异常，子类方法必须同样抛出那些异常或者异常的真子集，也就是不能抛出新的异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> a = <span class="number">5</span>/<span class="number">2</span>; <span class="comment">//无异常</span></span><br><span class="line">			System.out.println(<span class="string">"a is "</span> + a);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span>(Exception ex)</span><br><span class="line">		&#123;</span><br><span class="line">			ex.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">finally</span></span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(<span class="string">"Phrase 1 is over"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">try</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> a = <span class="number">5</span>/<span class="number">0</span>; <span class="comment">//ArithmeticException</span></span><br><span class="line">			System.out.println(<span class="string">"a is "</span> + a);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span>(Exception ex)</span><br><span class="line">		&#123;</span><br><span class="line">			ex.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">finally</span></span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(<span class="string">"Phrase 2 is over"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">try</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> a = <span class="number">5</span>/<span class="number">0</span>; <span class="comment">//ArithmeticException</span></span><br><span class="line">			System.out.println(<span class="string">"a is "</span> + a);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span>(Exception ex)</span><br><span class="line">		&#123;</span><br><span class="line">			ex.printStackTrace();</span><br><span class="line">			<span class="keyword">int</span> a = <span class="number">5</span>/<span class="number">0</span>; <span class="comment">//ArithmeticException</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">finally</span></span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(<span class="string">"Phrase 3 is over"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="第五章：Java文件读写"><a href="#第五章：Java文件读写" class="headerlink" title="第五章：Java文件读写"></a>第五章：Java文件读写</h2><ol>
<li><p>Java - IO</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileAttributeTest</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">	<span class="comment">//创建目录</span></span><br><span class="line">	File d=<span class="keyword">new</span> File(<span class="string">"c:/temp"</span>);</span><br><span class="line">	<span class="keyword">if</span>(!d.exists())</span><br><span class="line">	&#123;</span><br><span class="line">		d.mkdirs();  <span class="comment">//mkdir 创建单级目录  mkdirs 连续创建多级目录</span></span><br><span class="line">	&#125;</span><br><span class="line">	System.out.println(<span class="string">"Is d directory? "</span> + d.isDirectory());</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//创建文件  </span></span><br><span class="line">    File f=<span class="keyword">new</span> File(<span class="string">"C:/temp/abc.txt"</span>);    </span><br><span class="line">    <span class="keyword">if</span>(!f.exists())</span><br><span class="line">    &#123;    	</span><br><span class="line">      <span class="keyword">try</span></span><br><span class="line">      &#123;</span><br><span class="line">        f.createNewFile(); <span class="comment">//创建abc.txt</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span>(IOException e)&#123; <span class="comment">//可能会因为权限不足或磁盘已满报错</span></span><br><span class="line">    	  e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输出文件相关属性</span></span><br><span class="line">    System.out.println(<span class="string">"Is f file? "</span> + f.isFile());</span><br><span class="line">    System.out.println(<span class="string">"Name: "</span>+f.getName());</span><br><span class="line">    System.out.println(<span class="string">"Parent: "</span>+f.getParent());</span><br><span class="line">    System.out.println(<span class="string">"Path: "</span>+f.getPath());</span><br><span class="line">    System.out.println(<span class="string">"Size: "</span>+f.length()+<span class="string">" bytes"</span>);</span><br><span class="line">    System.out.println(<span class="string">"Last modified time: "</span>+f.lastModified()+<span class="string">"ms"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//遍历d目录下所有的文件信息</span></span><br><span class="line">    System.out.println(<span class="string">"list files in d directory"</span>);</span><br><span class="line">    File[] fs = d.listFiles();  <span class="comment">//列出d目录下所有的子文件，不包括子目录下的文件</span></span><br><span class="line">    <span class="keyword">for</span>(File f1:fs)</span><br><span class="line">    &#123;</span><br><span class="line">    	System.out.println(f1.getPath());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//f.delete(); //删除此文件</span></span><br><span class="line">    <span class="comment">//d.delete(); //删除目录</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Java - NIO</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.DirectoryStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.LinkOption;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.StandardCopyOption;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.attribute.BasicFileAttributes;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilesTest</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] a)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		moveFile();</span><br><span class="line">		fileAttributes();</span><br><span class="line">		createDirectory();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">moveFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Path from = Paths.get(<span class="string">"c:/temp"</span>, <span class="string">"abc.txt"</span>);</span><br><span class="line">		<span class="comment">//移动c:/temp/abc.txt到c:/temp/test/def.txt，如目标文件已存在，就替换</span></span><br><span class="line">		Path to = from.getParent().resolve(<span class="string">"test/def.txt"</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//文件的大小bytes</span></span><br><span class="line">			System.out.println(Files.size(from));</span><br><span class="line">			<span class="comment">//调用文件移动方法  如果目标文件已经存在，就替换</span></span><br><span class="line">			Files.move(from, to, StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			System.err.println(<span class="string">"移动文件错误"</span> + e.getMessage());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fileAttributes</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Path path = Paths.get(<span class="string">"c:/temp"</span>);</span><br><span class="line">		<span class="comment">//1</span></span><br><span class="line">		System.out.println(Files.isDirectory(path, LinkOption.NOFOLLOW_LINKS));</span><br><span class="line">		<span class="comment">//2</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//获得文件的基础属性</span></span><br><span class="line">			BasicFileAttributes attributes = Files.readAttributes(path, BasicFileAttributes<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">			System.out.println(attributes.isDirectory());</span><br><span class="line">			System.out.println(<span class="keyword">new</span> Date(attributes.lastModifiedTime().toMillis()).toLocaleString());</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createDirectory</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Path path = Paths.get(<span class="string">"c:/temp/test"</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//创建文件夹</span></span><br><span class="line">			<span class="keyword">if</span>(Files.notExists(path))&#123;</span><br><span class="line">				Files.createDirectories(path);</span><br><span class="line">				System.out.println(<span class="string">"create dir"</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				System.out.println(<span class="string">"dir exists"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			Path path2 = path.resolve(<span class="string">"A.java"</span>); </span><br><span class="line">			Path path3 = path.resolve(<span class="string">"B.java"</span>);</span><br><span class="line">			Path path4 = path.resolve(<span class="string">"C.txt"</span>);</span><br><span class="line">			Path path5 = path.resolve(<span class="string">"D.jpg"</span>);</span><br><span class="line">			Files.createFile(path2);</span><br><span class="line">			Files.createFile(path3);</span><br><span class="line">			Files.createFile(path4);</span><br><span class="line">			Files.createFile(path5);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//不加条件遍历</span></span><br><span class="line">			DirectoryStream&lt;Path&gt; paths = Files.newDirectoryStream(path);</span><br><span class="line">			<span class="keyword">for</span>(Path p : paths)&#123;</span><br><span class="line">				System.out.println(p.getFileName());</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//创建一个带有过滤器,过滤文件名以java txt结尾的文件</span></span><br><span class="line">			DirectoryStream&lt;Path&gt; pathsFilter = Files.newDirectoryStream(path, <span class="string">"*.&#123;java,txt&#125;"</span>);</span><br><span class="line">			<span class="keyword">for</span>(Path p : pathsFilter)&#123;</span><br><span class="line">				System.out.println(p.getFileName());</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h2 id="第六章：Java常用数据结构"><a href="#第六章：Java常用数据结构" class="headerlink" title="第六章：Java常用数据结构"></a>第六章：Java常用数据结构</h2>]]></content>
      <categories>
        <category>Java学习心得</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
